Types of Software Testing 
Various types of software testing are performed to achieve different objectives when testing a software application.

Ad-hoc testing This type of software testing is very informal and unstructured and can be performed by any stakeholder with no reference to any test case or test design documents.
The person performing Ad-hoc testing has a good understanding of the domain and workflows of the application to try to find defects and break the software. Ad-hoc testing is intended to find defects that were not found by existing test cases.

Acceptance Testing Acceptance testing is a formal type of software testing that is performed by end user when the features have been delivered by developers and tested by testers. The aim of this testing is to check if the software conforms to the business needs and the requirements provided earlier. Acceptance tests are normally documented at the beginning of the sprint (in agile) and is a means for testers and developers to work towards a common understanding and business knowledge.

Beta Testing is a formal type of software testing that is carried out by end customers before releasing or handing over the software to end users. Successful completion of Beta testing means customer acceptance of the software.

Accessibility Testing The aim of accessibility testing is to determine if the contents of the website can be easily accessed by disable people. Various checks are performed to ensure this such as color and contrast check for color blind people, font size check for visually impaired people, clear and concise text that is easy to read and understand.

Agile Testing Agile Testing is a type of testing for the software that accommodates agile software development approach and practices. In an Agile development environment, testing is an integral part of software development and is done along with coding. Agile testing allows incremental and iterative coding and testing. 

Automated testing is a testing approach that makes use of testing tools and/or programming to run the test cases without manual intervention. Most of the automated tools provide capture and playback facility, however there are some other tools that require writing extensive scripting or programming to automate test cases.

All Pairs testing Also known as Pair wise testing, it is a black box testing approach and a testing method wherein each input is tested in pairs of inputs, which helps to test whether the software works as expected with all possible input combinations.
Pairwise or All Pairs Testing is a very powerful test technique and is mainly used to reduce the number of test cases while increasing the coverage of feature combinations.

Pair Testing is a software testing technique that can be done by software testers, developers, or Business analysts (BA). As the name suggests, two people are paired together, one to test and other to monitor and record test results. Pair testing can also be performed in combination of tester-developer, tester-business analyst, or developer-business analyst combination. Combining testers and developers in pair testing helps to detect defects faster, identify root cause, fix, and test the fix.

Black Box testing Black box testing is a software testing method wherein testers are not required to know coding or internal structure of the software. Black box testing method relies on testing software with various inputs and validating results against expected output.

Backward Compatibility Testing Type of software testing performed to check newer version of the software can work successfully over previous version of the software and the newer version of the software works fine with table structure, data structures, files created by previous version of the software.

Compatibility testing Compatibility testing is one of the test types performed by testing team. Compatibility testing checks if the software can be run on different hardware, hardware peripherals, operating system, processor, different browsers and different versions of the browsers, bandwidth, databases, web servers, application servers, emulators, different configuration etc.

Browser compatibility testing is one of the sub types of compatibility testing performed by testing team. Browser compatibility testing is performed for web applications with combination of different browsers and operating systems.

Integration Testing Integration testing also known as I&T in short, in one of the important types of software testing. Once the individual units or components are tested by developers as working then testing team will run tests that will test the connectivity among these units/component or multiple units/components. There are different approaches for Integration testing namely, Top-down integration testing, Bottom-up integration testing and a combination of these two known as Sand witch testing.

Big Bang Integration testing is one of the integration testing approaches. In Big Bang integration testing all or almost all of the modules are developed and then coupled together. Focus of Big Bang Integration testing is to test for errors related to integration among the modules.

Bottom up Integration testing An approach to integration testing where the lowest level components are tested first, then used to facilitate the testing of higher level components. The process is repeated until the component at the top of the hierarchy is tested. Bottom up integration testing begins with smaller portion of the software and eventually scale up in terms of size, complexity and completeness.

System Integration Testing known as SIT (in short) is a type of testing conducted by software testing team. Focus of System integration testing is to test for errors related to integration among different applications, third party vendor applications, services etc., As part of SIT, end-to-end scenarios are tested that would require software to interact (send or receive data) with other upstream or downstream applications, third party application calls, services etc.

Branch Testing is a white box testing method for designing test cases to test code for every branching condition. Branch testing method is applied during unit testing.

Condition Coverage Testing Condition coverage testing is a testing technique used during unit testing, where in developer tests for all the condition statements like if, if else, case etc., in the code being unit tested.

Component Testing This type of software testing is performed by developers. Component testing is carried out after completing unit testing. Component testing involves testing a group of units as code together as a whole rather than testing individual functions, methods.

Decision Coverage Testing Is a testing technique that is used in Unit testing, objective of decision coverage testing is to expertise and validate each and every decisions made in the code e.g. if, if else, case statements.

End-to-end Testing End to end testing is performed by testing team, focus of end to end testing is to test end to end flows e.g. right from order creation till reporting or order creation till item return etc. and checking. End to end testing is usually focused on mimicking real-life scenarios and usage. End to end testing involves testing information flow across applications.

Fuzz Testing Fuzz testing or fuzzing is a software testing technique that involves testing the software with unexpected or random inputs and monitoring for failures or error messages that are presented due to the input errors.

Glass box Testing Glass box testing is another name for White box testing. Glass box testing is a testing method that involves testing individual statements, functions etc. Unit testing is one of the Glass box testing methods.

Gorilla Testing	
This type of software testing is done by software testing team. Objective of Gorilla Testing is to test one or few functionalities of the software thoroughly or exhaustively by multiple people testing the same functionality.

Interface Testing Software provides support for one or more interfaces like “Graphical user interface”, “Command Line Interface” or “Application programming interface” to interact with its users or other software. Interfaces serves as medium for software to accept input from user and provide result. Approach for interface testing depends on the type of the interface being testing like GUI or API or CLI.

GUI (Graphical User Interface) testing This type of software testing is aimed at testing the software GUI (Graphical User Interface) of the software meets the requirements as mentioned in the GUI mockups and Detailed designed documents. For e.g. checking the length and capacity of the input fields provided on the form, type of input field provided, e.g. some of the form fields can be displayed as dropdown box or a set of radio buttons. So GUI testing ensures GUI elements of the software are as per approved GUI mockups, detailed design documents and functional requirements. Most of the functional test automation tools work on GUI capture and playback capabilities. This makes script recording faster at the same time increases the effort on script maintenance.

What is Application Programming Interface (API)? A formalized set of software calls and routines that can be referenced by an application program in order to access supporting system or network services is called an API.

API Testing API testing is a type of testing that is similar to unit testing. Each of the Software API’s are tested as per API specification. API testing is mostly done by testing team unless APIs to be tested are complex and needs extensive coding. API testing requires understanding both API functionality and possessing good coding skills.

Internationalization Testing Internationalization testing is a type of testing that is performed by software testing team to check the extent to which software can support Internationalization i.e., usage of different languages, different character sets (single /double byte) etc., For e.g.: Gmail, is a web application that is used by people all over world with different languages, single byte or multi byte character sets.

Keyword-driven Testing Keyword driven testing is more of an automated software testing approach than a type of testing itself. Keyword driven testing is also known as action driven testing or table driven testing.

Localization Testing Localization testing is a type of software testing performed by software testers. In this type of testing, software is expected to adapt to a particular locale/language in terms of display of font, date, time, currency; accepting input in that particular locale etc., related to a particular locale. For e.g. many web applications allow choice of locale like English, French, German or Japanese. So once locale is defined or set in the configuration of software, software is expected to work as expected with a set language/locale.
Happy path testing Also known as Golden path testing, this type of testing focuses on selective execution of tests that do not exercise the software for negative or error conditions.

Negative Testing This type of software testing approach, which calls out the “attitude to break”. These are functional and non-functional tests that are intended to break the software by entering incorrect data like incorrect date, time or string or uploading binary file when text files are supposed to be uploaded or entering huge text string for input fields etc. It is also a positive test for an error condition.

Functional Testing Functional testing is a formal type of testing performed by testers. Functional testing focuses on testing software against design document, requirements document and use cases. Functional testing is a black box type of testing and does not require internal working of the software unlike white box testing.

Non functional testing Softwares are built to fulfill both functional and non-functional requirements. There are many types of testing like performance, compatibility testing, compliance testing, localization testing, usability testing, volume testing etc., that are carried out for checking non-functional requirements.

Risk based Testing is a type of software testing and a different approach towards testing a software. In Risk based testing, requirements and functionality of software to be tested are prioritized as Critical, High, Medium and low. In this approach, all critical and high priority tests are tested followed by Medium priority tests. Low priority or low risk functionality are tested at the end or may not be tested based on the time available for testing.
Security testing basically checks, how good is software’s authentication & authorization mechanism, how software maintains integrity & confidentiality of the data, what is the availability of the software in an event of an attack on the software by hackers and malicious programs. 
Security testing requires good knowledge of application, technology, networking, security testing tools. With increasing number of web applications necessarily of security testing has increased to a greater extent.

Performance Testing is a type of software testing and part of performance engineering that is performed to check some of the quality attributes of software like Stability, reliability, availability. Performance testing is carried out by performance engineering team. Unlike Functional testing, Performance testing is done to check non-functional requirements. Performance testing checks how well software works in anticipated and peak workloads. There are different variations or sub types of performance like load testing, stress testing, volume testing, soak testing and configuration testing.

Load Testing Load testing is a type of non-functional testing; load testing is done to check the behavior of the software under normal and over peak load conditions. Load testing is usually performed using automated testing tools. Load testing intends to find bottlenecks or issues that prevent software from performing as intended at its peak workloads.

Scalability Testing is a non-functional test intended to test one of the software quality attributes i.e. “Scalability”. Scalability test is not focused on just one or few functionality of the software instead performance of software as a whole. Scalability testing is usually done by performance engineering team. Objective of scalability testing is to test the ability of the software to scale up with increased users, increased transactions, increase in database size etc., It is not necessary that software’s performance will increase with increase in hardware configuration, scalability tests helps to find out how much more workload the software can support with expanding user base, transactions, data storage etc.

Stability Testing is a non-functional test intended to test one of the software quality attribute i.e. “Stability”. Stability testing focuses on testing how stable software is when it is subject to peak loads, loads generated in spikes, with more volumes of data to be processed. Scalability testing will involve performing different types of performance tests like load testing, stress testing, spike testing, soak testing etc.
Dynamic Testing Testing can be performed as Static Testing and dynamic testing; dynamic testing is a testing approach where-in testing can be done only by executing code or software application. Unit testing, Functional testing, regression testing, performance testing etc.

Static Testing is a form of testing where in approaches like reviews; walkthroughs are employed to evaluate the correctness of the deliverable. Static testing usually has check lists against which deliverables are evaluated. In static testing software code is not executed instead it is reviewed for syntax, commenting, naming convention, size of the functions and methods etc. Static testing can also be applied for requirements, designs, test cases by using approaches like reviews or walkthroughs.

Stress Testing is a type of performance testing, in which software is subjected to peak loads and even to a break point to observe how the software would behave at breakpoint. Stress testing also tests the behavior of the software with insufficient resources like CPU, Memory, Network bandwidth, Disk space etc. Stress testing enables to check some of the quality attributes like robustness and reliability.

System Testing It includes multiple software testing types that enable to validate the software as a whole (software, hardware and network) against the requirements for which it was built. Different types of tests (GUI testing, Functional testing, Regression testing, Smoke testing, load testing, stress testing, security testing, ad-hoc testing etc.,) are carried out to complete system testing.

Soak Testing is a type of performance testing, wherein software is subjected to load over a significant duration of time ranging from few days to few weeks. Soak testing is a type of testing that is conducted to find errors/defects that result due to degeneration of software performance with continued usage. Soak testing is extensively done for electronic devices, which are expected to run continuously for days or months or years without restarting or rebooting. With growing web applications soak testing has gained significant importance as web application availability is critical for sustaining and success of business.

Unit testing is a type of testing that is performed by software developers. Unit testing follows white box testing approach where developer will test units of source code like statements, branches, functions, methods OR class, interface in OOP (object oriented programming). Unit testing usually involves in developing stubs and drivers. Unit tests are ideal candidates for automation. Automated tests can run as Unit regression tests on new builds or new versions of the software. There are many useful unit testing frameworks like Junit, Nunit etc., available that can make unit testing more effective.

Usability testing is a type of software testing that is performed to understand how user friendly the software is. Objective of usability testing is to allow end users to use the software, observe their behavior, their emotional response (whether users liked using software or were they stressed using it? etc.,) and collect their feedback on how the software can be made more usable or user friendly and incorporate the changes that make the software easier to use.

Volume testing	is a non-functional type of testing carried out by performance engineering team. Volume testing is one of the types of performance testing. Volume testing is carried out to find the response of the software with different sizes of the data being received or processed by the software. For e.g. If you were to be testing Microsoft word, volume testing would be to see if word can open, save and work on files of different sizes (10 to 100 MB).

Vulnerability Testing involves identifying; exposing the software, hardware or network vulnerabilities that can be exploited by hackers and other malicious programs like viruses or worms. Vulnerability testing is the key to software security and availability. With increased number of hackers and malicious programs, Vulnerability Testing is critical for success of a Business.

Penetration Testing is a type of security testing, also known as pentest in short. Objective of Penetration testing is to secure the software and its environments (Hardware, Operating system, and network) when subjected to attack by an external or internal intruder including threats from human or malicious programs. 
[Pentest uses methods to forcibly intrude (by brute force attack) or by using a weakness (vulnerability) to gain access to a software or data or hardware with an intent to expose ways to steal, manipulate or corrupt data, software files or configuration. Penetration Testing is a way of ethical hacking, an experienced Penetration tester will use the same methods and tools that a hacker would use but the intention of Penetration tester is to identify vulnerability and get them fixed before a real hacker or malicious program exploits it.]

Security Testing is a type of software testing carried out by specialized team of software testers. Objective of security testing is to secure the software when subjected to attack by an external or internal intruder including threats from humans and malicious programs. 

White box Testing is also known as clear box testing, transparent box testing and glass box testing. White box testing is a software testing approach, which intends to test software with knowledge of internal working of the software. White box testing approach is used in Unit testing which is usually performed by software developers. White box testing intends to execute code and test statements, branches, path, decisions and data flow within the program being tested. White box testing and Black box testing complement each other as each of the testing approaches have potential to un-cover specific category of errors.
Note: Interestingly, no matter how well-defined a Software Testing Life Cycle you have in your project or organization, there are chances that you will invariably witness the following widely popular cycle:
	Testing
	Cursing
In this type of STLC, you skip phases like requirement/design review, test planning, and test designing –in the high hope that the skipping will save you some time and/or cost.
Also, note that the Software Testing Life Cycle phases mentioned above do not necessarily have to be in the order listed; some phases can sometimes run in parallel (For instance, Test Designing and Test Execution). And, in extreme cases, the phases might also be reversed (For instance, when there is Cursing prior to Testing).

Some Basic Interview FAQs
1. So, tell me a little about yourself.
2. Why are you looking (or why did you leave you last job)?
3. Tell me what you know about this company.
4. Why do you want to work at X Company?
5. What relevant experience do you have?
6. If your previous co-workers were here, what would they say about you?
7. Have you done anything to further your experience?
Yes, I have done external certification like ISTQB, OCJP etc.
8. Where else have you applied?
I have applied in X, Y companies and I am supposed to get interviewed in 10 – 15 days. 
9. How are you when you are working under pressure?
I perform better under pressure.
10. What motivates you to do a good job?
If I am doing well I should be recognized. This kind of thing motivates me to do a good job.
14. Are you good at working in a team?
Yes, how can anyone function inside an organization if they are a loner?
11. What is your greatest strength?
For example, team work, interpersonal skills, creative problem solving, dependability, reliability, originality, leadership etc., could all be cited as strengths. Work out which is most important for the particular job in question and make sure you illustrate your answer with examples from as many parts of your experience, not just university, as you can.
12. What's your biggest weakness? Or How would your worst enemy describe you?
"I'm perhaps too committed to my work and don't spend enough time with my family." 
13. Let's talk about salary. What are you looking for?
Well, that's something I've thought long and hard about and I think someone with my experience should get between X & Y
15. Tell me a suggestion you have made that was implemented.
Earlier, the downtime was not being tracked properly which was causing issues from the Client side. I had suggested that it should be tracked somewhere in excel sheet so that it can be shared with the Client on regular basis to avoid the issue. That was implemented and till date that is being followed. 
The same thing happened with leave tracker also where the leaves of the employees were not being tracked anywhere except in the leave portal. As per my suggestion, we started maintaining a leave tracker so that the leaves are tracked for the resources.
Another one is Write file utility. While doing service testing using Parasoft SOA tool, request and response were not being tracked anywhere except in the tool. I had made a Write file utility tool in Java, where the request and response for a particular test case were being tracked in a folder created with a test case id.
16. Has anything ever irritated you about people you've worked with?
I have always got on just fine with my co-workers actually.
17. Is there anyone you just could not work with?
No. Well, unless you are talking about murderers, racists, rapists, thieves or other such characters, you can work with anyone.
18. Tell me about any issues you've had with a previous boss.
I have never had any such issues.
19. Would you rather work for money or job satisfaction?
Job satisfaction
20. Would you rather be liked or feared?
Neither, I'd rather be respected.
21. Are you willing to put the interests of X Company ahead of your own?
I will try to make balance. And if for some instances, I am not able to make the balance, I will put the interest of the Company first.
22. So, explain why I should hire you.
I am a good team player. I can work under pressure and ensure that the task is completed on time.
23. Finally, do you have any questions to ask me?
How soon could I start, if I were offered the job? 
What you'd be working on specifically, in the role I am applying for and how that affects the rest of the company.
Ask about the work itself, training and career development.
24. Why do you want this job?
"I'm always ready to take on responsibility and feel this will come more quickly with a firm of this size. A small firm also gives the chance to build closer working relationships with clients and colleagues and I've found through my past work experience that this makes an organisation more effective as well as more satisfying to work in."
Try to find some specific feature on which the employer prides themselves: their training, their client base, their individuality, their public image, etc. This may not always be possible with very small organisations but you may be able to pick up something of this nature from the interviewer.
25. Describe a situation in which you lead a team.
This, and other skills which the employer considers essential for effective performance in the job, should have been highlighted in the job description or graduate brochure - so always be prepared to give examples of situations where you have demonstrated these qualities! While your example should indicate the nature of the team and the task, you need to focus on your own role as leader and on the personal qualities that led you to take on/be nominated for this role and which helped you to succeed in it. Leadership involves many skills: planning, decision-making, persuading, motivating, listening, co-ordinating - but not dictating!
See our Leadership Styles page for more help with this
26. Describe a situation where you worked in a team
Another competency-based question. Most jobs will involve a degree of teamwork. The interviewer needs to assess how well you relate other people, what role you take in a group and whether you are able to focus on goals and targets. 
Outline the situation, your particular role and the task of the group overall. Describe any problems which arose and how they were tackled. Say what the result was and what you learned from it. 
Examples could include putting on a drama or music production; a group project at university; a business game or "Young Enterprise" scheme or working in a fast-food restaurant.
27. What do you expect to be doing in 5 years time?
28. Who else have you applied to/got interviews with?
29. Why did you choose your university and what factors influenced your choice?
30. What are your strengths?
For example, team work, interpersonal skills, creative problem solving, dependability, reliability, originality, leadership etc., could all be cited as strengths. Work out which is most important for the particular job in question and make sure you illustrate your answer with examples from as many parts of your experience, not just university, as you can.
This question may be phrased in other ways, such as "Tell me about yourself" or "How would a friend describe you?"
31. What has been your greatest achievement?
32. Question: "How would you describe yourself as a team member?" / "What do you enjoy better, working as a team or working alone?"
Answer: "I'm a good team worker. I enjoy the company of people, I like working in a team, and am always willing to help off course after doing my share."

Question: "Give me an example of a contribution you made to your work team."
Answer: "I recently worked with five programmers on a project. I made a significant contribution to the success of the team in carrying out the project. At the end of the project I got a letter of commendation for my contribution to the success of the team."
Question: "How do you deal with working under pressure"?
Answer: "I work well under pressure. For example, recently the number of workers in our team was cut and the amount of work I was given nearly doubled. I was asked by the manager to work overtime, and I managed to work efficiently and in a professional manner during a busy and stressful time. I showed efficiency and professionalism in spite of the stress."
 
Important Links
Squish: - https://doc.froglogic.com/squish/6.2/rgs-squish.html
Squish concept: - https://doc.froglogic.com/squish/3.2/tgsc-concepts.html
Selenium concept: - https://www.tutorialspoint.com/selenium/selenium_webdriver.htm
Defect lifecycle: - https://www.toolsqa.com/software-testing/defect-life-cycle/
Defect Triage: - https://www.softwaretestingmaterial.com/defect-triage-meeting/
API Automation: - https://www.nylas.com/blog/use-python-requests-module-rest-apis/
API: - https://www.youtube.com/watch?v=3ts5fzmhN5o&list=PLIMhDiITmNrILoYaVsrxwteH6LqMr07uX
SDLC: - https://www.softwaretestinghelp.com/software-development-life-cycle-sdlc/
STLC: - https://www.softwaretestinghelp.com/what-is-software-testing-life-cycle-stlc/
Agile: - https://www.softwaretestinghelp.com/25-best-agile-testing-interview-questions-and-answers/
Azure: - https://www.edureka.co/blog/interview-questions/azure-interview-questions/
pytest: - https://www.guru99.com/pytest-tutorial.html
BDD:https://www.youtube.com/watch?v=JIyvAFBx2Fw&list=PLUDwpEzHYYLsARXz1o3Ldt1FnvRbvlxsS
Performance Testing:- https://youtu.be/a8zV6GjExV8 // https://youtu.be/mXGcBvWYl-U
Azure storage: - https://docs.microsoft.com/en-us/azure/storage/common/storage-introduction
Mobile Testing: -https://www.youtube.com/watch?v=yTW7hZZfTYo&list=PLUDwpEzHYYLsx_2JFNBMITjHqTnuszhb_
SQL: - Refer Notebook
Python: - Refer book
Linux: - Refer Notebook
Selenium: - Refer Notebook
Healenium: - https://healenium.io/
OpenTest - https://getopentest.org/

 
Manual Testing FAQs
Top-down Testing: In this approach, testing is conducted from main module to sub module. If the sub module is not developed a temporary program called STUB is used to simulate the submodule. A ‘Stub’ is a piece of software that works similar to a component which is referenced by the Unit being tested, but it is much simpler that the actual unit.

Bottom-up testing: In this approach, testing is conducted from sub module to main module. If the main module is not developed a temporary program called DRIVERS is used to simulate the main module. A ‘Driver’ is a piece of software that drives (invokes) the Unit being tested.

Sandwich testing: It is also known as Hybrid approach in Integration testing. This approach is the combination of bottom-up & top-down approach. In this approach the Stubs (Called Program) and Drivers (Calling Program) are used by the programmers wherever the programs are incomplete.

Exploratory testing: It is an informal type of testing conducted to learn the functions of software at the same time looking for errors or application behavior that seems non-obvious. Exploratory testing is usually done by testers but can be done by other stake holders as well like Business Analysts, developers, end users etc. who are interested in learning functions of the software and at the same time looking for errors or behavior that seems non-obvious.
The definition of Exploratory Testing is “simultaneous test design and execution” against an application. This means that the tester uses his domain knowledge and testing experience to predict where and under what conditions the system might behave unexpectedly. As the tester starts exploring the system, new test design ideas are thought of on the fly and they are executed against the software under test.
This is in contrast to Scripted Testing where tests are designed beforehand using the requirements or design documents, usually before the system is ready and execute exactly the same tests against the system in another time.
Exploratory Testing is usually performed as the product is evolving (agile) or as a final check before the software is released. It is a complimentary activity to automated regression testing.

Regression Testing is a type of software testing that is carried out by software testers to find defects that got introduced while fixing defect(s) or introducing new feature(s). Regression tests are ideal candidate for automation.

Retesting is a type of testing that is carried out by software testers as a part of defect fix verification. For e.g. a tester is verifying a defect fix and let us say that there are 3 test cases failed due to this defect. Once the developer fixes the defect, the tester will retest or test the same functionality again by executing the 3 test cases that were failed earlier.

User Acceptance testing (UAT) is performed by clients / end users of the software. It allows SMEs (Subject matter experts) from client to test the software with their actual business scenarios to check if the software meets their business requirements.

Defect: - A defect is an error or a mistake in the application which got introduced by programmer while designing and /or building the software application. These mistakes or errors mean that there are flaws in the software. These are called defects.

What is Defect Life Cycle: - Defect/Bug life cycle is the journey of a defect which it goes through during its lifetime. It varies from organization to organization and from project to project as it is governed by the software testing process and also depends upon the tools used. However, the basis remains the same; Defect Life Cycle includes the following common stages.
 
Defect Triage is a process in Software development where each defect is prioritized based on its severity, risk, reoccurrence, etc. The objective of a defect triage meeting is to track all the defects and ensure correct resolution in timely manner. During Defect Triage Meetings, Triage Teams decide how to categorize and prioritize defects. 
Categories often used are:
•	We are going to fix this now
•	We are going to fix this later
•	We are never going to fix this
Process of the Defect Triage Meeting?
•	Defect Review
•	Defect Assessment
•	Defect Assignment
Questions raised during the Defect Triage Meeting are as follows:
•	Is this bug valid?
•	What is the severity of the bug?
•	When to fix this bug? / What is the priority of the bug?
Participants in the Defect Triage Meeting are as follows:
•	Test Lead
•	Development Lead
•	Project Manager
•	Test Manager
•	Testers
•	Developers
•	Business Analyst
•	Product Manager

Bug Severity
Bug Severity or Defect Severity in testing is a degree of impact a bug or a Defect has on the software application under test. A higher effect of bug/defect on system functionality will lead to a higher severity level. A Quality Assurance engineer usually determines the severity level of a bug/defect. 

Types of Severity
In Software Testing, Types of Severity of bug/defect can be categorized into four parts:
•	Low: It won't cause any major break-down of the system
•	Medium: It causes some undesirable behavior, but the system is still functional
•	Major: It is a highly severe defect and collapses the system. However, certain parts of the system remain functional
•	Critical: This defect indicates complete shut-down of the process, nothing can proceed further

Bug Priority
Priority is defined as the order in which a defect should be fixed. Higher the priority the sooner the defect should be resolved. Defects that leave the software system unusable are given higher priority over defects that cause a small functionality of the software to fail. 

Types of Priority
Types of Priority of bug/defect can be categorized into three parts: 
•	Low: The Defect is an irritant, but repair can be done once the more serious Defect has been fixed
•	Medium: During the normal course of the development activities defect should be resolved. It can wait until a new version is created
•	High: The defect must be resolved as soon as possible as it affects the system severely and cannot be used until it is fixed

Tips for determining the Severity and Priority of a Defect
Decide the frequency of occurrence: In some cases, if the occurrence of a minor-defect is frequent in the code, it can be more severe. So from a user's perspective, it is more serious even though it is a minor defect.
Isolate the defect: Isolating the defect can help to find out its severity of the impact.

 
Priority vs Severity: Key Difference
Priority	Severity
Defect Priority has defined the order in which the developer should resolve a defect	Defect Severity is defined as the degree of impact that a defect has on the operation of the product
Priority is categorized into three types – Low, Medium, High	Severity is categorized into five types – Critical, Major, Medium, Low
Priority is associated with scheduling	Severity is associated with functionality or standards
Priority indicates how soon the bug should be fixed	Severity indicates the seriousness of the defect on the product functionality
Priority of defects is decided in consultation with the manager/client	QA engineer determines the severity level of the defect
Priority is driven by business value	Severity is driven by functionality
Its value is subjective and can change over a period of time depending on the change in the project situation	Its value is objective and less likely to change
High priority and low severity status indicates, defect have to be fixed on immediate bases but does not affect the application	High severity and low priority status indicates defect have to be fixed but not on immediate bases
Priority status is based on customer requirements	Severity status is based on the technical aspect of the product
During UAT the development team fix defects based on priority	During SIT, the development team will fix defects based on the severity and then priority

Software Testing Life Cycle (STLC): - It is a software testing process which has specific steps to be executed in a definite sequence to ensure that the quality goals of the application have been met. Each activity is carried out in a planned and systematic way. Each phase has different goals and deliverables. STLC phases vary from organization to organization as it is governed by the software testing process; however, the basis remains the same. It includes the following common phases.
Phase	Entry Criteria	Activities Performed	Deliverables
Requirement gathering	-Requirement’s specification document
-Application design document
-User acceptance criteria document	-Do brainstorming of the requirements. Create a list of requirements and get your doubts clarified.
-Understand the feasibility of the requirements whether it is testable or not.
-If your project requires automation, do the automation feasibility study.	-Requirements understanding document
-Testing feasibility report
-Automation feasibility report
Planning	-Updated requirements document.
-Test feasibility reports.
-Automation feasibility report.	-Define the scope of the project
-Do the risk analysis and prepare the risk mitigation plan.
-Perform test estimation.
-Determine the overall testing strategy and process.
-Identify the tools and resources and check for any training needs.
-Identify the environment.	-Test Plan document.
-Risk mitigation document.
-Test estimation document.
Analysis	-Updated requirements document
-Test Plan document
-Risk mitigation document
-Test estimation document	-Identify the detailed test conditions	-Test conditions document.
Design	-Updated requirements document
-Test conditions document	-Detail out the test condition
-Identify the test data
-Create the traceability metrics	-Detailed test condition document
-Requirement traceability metrics
-Test coverage metrics
Implementation	-Detailed test condition document	-Create and review the test cases.
-Create and review the automation scripts.
-Identify / create the test data.
-Identify the candidate test cases for regression and automation.
-Take sign off of the test cases and scripts.	-Test cases
-Test scripts
-Test data
Execution	-Test cases
-Test scripts
-Test data	-Execute the test cases
-Log bugs / defects in case of discrepancy
-Report the status	-Test execution report
-Defect report
-Test log and Defect log
-Updated requirement traceability metrics
Conclusion	-Updated test cases with results
-Test closure conditions	-Provide the accurate figures and result of testing
-Identify the risks which are mitigated	-Test summary report
-Updated traceability metrics
-Updated risk management report
Closure	-Test summary report
-Test closure condition	-Do the retrospective meting and understand the lessons learnt	-Lessons learnt document
-Test closure report
-Test matrices

Test Closure Report: - Test Closure Document is the note prepared before formally completing the testing process. This contains the numbers of test cases executed, no. of defects found, defect density, slippage ratio, consolidated test result report etc.

Test Summary Report: -
Test Summary Report is a document which contains a summary of all the test activities performed along with their final results. This is an assessment of how well the testing is performed. Based on this document, stakeholders evaluate the quality of the product and make a decision on the software release. Here is a list of what should be included.
1.	Objective of test –This is mainly to indicate that the tester understood the expectation and the requirement.
2.	Testing Approach – This indicates to the client what and how the testing was performed. Contains details of the steps taken and the types of testing done to achieve the task.
3.	Platform details – It includes details of every single platform, browsers and environment tested.
4.	Areas Tested – This section includes high level information of all the features and functionalities tested.
5.	Areas Not Tested – Anything left untested is noted and expectations are set accordingly. Each such item must have an associated reason such as - limitation of access, unavailability of the device etc.
6.	Defect Report – This section should have a link to the Defect Report document.
7.	Testing Metrics (Optional) – Metrics, like total defects with a breakup of severity, can be helpful. If applicable, include additional metrics regarding test cases.
8.	Overall Summary – It must contain all critical issues so that the client can evaluate how close they are to launch and what remediation and timescale they might need in place for the fix.

Defect Report: - Basic elements are – 
1. Project name 		2. Module name 
3. Defect detected on 		4. Defect detected by 
5. Defect Id 6. Defect name 	7. Snapshot of the defect 
8. Priority, severity, status 
9. Defect resolved by 		10. Defect resolved on.

Test Strategy is a high-level document which defines the approach / the way testing should be carried out in an organization. It is kind of static document which sets the standards for testing and hence it is not updated often. It is basically derived from the Business Requirement document and developed by project manager or business analyst. 

Components of the Test Strategy document:
•	Scope and Objectives
•	Roles and responsibilities
•	Risks and mitigation plan
•	Test deliverables
•	Defect tracking and reporting
•	Communication and status reporting
•	Business issues
•	Industry standards to follow
•	Test automation and tools
•	Change and configuration management
•	Testing measurements and metrics
•	Training plan

Test Plan is derived from Software Requirement Specification (SRS) document. A test plan is a comprehensive document describing in detail the scope of testing and the different activities performed in testing. It is designed to be a resource for the testing team as well as other stakeholders.

Components of the Test Plan document:
•	Scope and Objectives of the project
•	Roles and responsibilities
•	Risks and mitigation plan
•	Test Deliverables
•	Defect tracking and reporting
•	Assumptions
•	Test cycle start/end dates
•	Testing end date
•	Testing environment
•	Target market

Metric: - It is a unit used for measuring an attribute. Can be defined as the standards of measurement. It’s important because you cannot improve and / or control what you cannot measure.

Defect Slippage Ratio: - Number of Defects Slipped (reported from production) / (Number of Defects Raised – Number of Defects Withdrawn).
Example: Customer filed defects are 21, total defect found while testing are 267, total number of invalid defects are 17. So, Slippage Ratio = [21/ (267-17)] *100

Defect Density: - (Defective Test Scripts/ Total Test Scripts) *100
Example – Total test script developed = 1360. Total test script executed = 1280. Total test script passed = 1065, Total test script failed = 215. So, Defect Density = (215/1280) *100

Requirement Volatility: - (Number of Requirements Added + Deleted + Modified) *100/(Number of Original Requirements)
Example – Suppose a release has total 67 requirements. Later they added 7 new requirements and removed 3 and modified 11 from the initial requirements. So, Requirement Volatility = (7+3+11) *100/67

Review Efficiency: - It offers an insight on review quality and testing. Some organization also term it as Static Testing and aim to get min 30% defects from Static Testing. It is calculated by dividing total number of defects found by reviews by total number of project defects multiplied by 100.
Example – A project found total 269 defects in different reviews. And there were total of 476 valid reported defects. So, Review Efficiency = 269/476 *100.

Effectiveness: - Doing the right thing. It deals with meeting the desired attributes expected by the customer.

Efficiency: - Doing things right. It concerns the resources used for rendering services.

Software Development Life Cycle (SDLC): - It is a software development process which has specific steps to be executed in a definite sequence. It has following phases – Requirement gathering and analysis, Design, Coding & Implementation, Testing, Deployment and Maintenance. It covers the detailed plan for building, testing, deploying, and maintaining the software. 
Refer: https://www.softwaretestinghelp.com/software-development-life-cycle-sdlc/

Use Case: - Use Cases represents functional requirements that need to be tested.

Test Scenario: - A Test Scenario is a business requirement to be tested. A test scenario can have one or more than one test cases. It is a set of test cases that ensure that the business process flows are tested end to end. They may be independent tests or a series of tests that follow each other, each dependent on the output of the previous one. 

User Stories: - It defines the actual business requirement. Generally created by the product owner. The following format should be used to write user stories.
As a [role]
I want [feature]
So that [benefit]
Test Case: - It is a set of test data, test steps / scripts and their expected results. A test case validates one or more system requirements against the expected results and generates a pass or fail. It has the following elements - 
1. Pre-Conditions 2. Steps to execute 	3. Test data 	4. Expected result 	5. Pass/Fail criteria

Below is a format of a standard login Test cases example. 
Test Case ID	Test Scenario	Test Steps	Test Data	Expected Results	Actual Results	Pass/Fail
TU01	Check Customer Login with valid Data	1.	Go to site http://demo.guru99.com
2.	Enter UserId
3.	Enter Password
4.	Click Submit	Userid = guru99 Password = pass99	User should Login into an application	As Expected	Pass
TU02	Check Customer Login with invalid Data	1.	Go to site http://demo.guru99.com
2.	Enter UserId
3.	Enter Password
4.	Click Submit				


Difference between Quality control, quality assurance and total quality management:
Although QA and QC are closely related concepts, and both are aspects of quality management, they are fundamentally different in their focus:
•	QC is the process of verifying quality of the product. It is a plan which ensures that the product / service made / rendered is at the highest ethical and profit-making standards the company has in mind.
•	QA is the process of managing quality of the product. Assurance is the warranty or guarantee given to the consumer for performance / state of the product.
•	QM=QA+QC

Smoke vs Sanity Testing:-
Smoke Testing	Sanity Testing
Smoke Testing is performed to check that the critical functionalities of the application are working fine	Sanity Testing is done to check that the new functionality / defect fixes are working fine
The objective is to verify the "stability" of the system to proceed with more rigorous testing	The objective is to verify the "rationality" of the system to proceed with more rigorous testing
This testing is performed by the developers or testers	Sanity testing is usually performed by testers
Smoke testing is usually documented or scripted	Sanity testing is usually not documented and is unscripted
Smoke testing is a subset of Acceptance testing	Sanity testing is a subset of Regression Testing

Smoke testing exercises the entire system from end to end	Sanity testing exercises only some particular component(s) of the entire system
Smoke testing is like General Health Check Up	Sanity Testing is like specialized health check up

Black box testing techniques: - 
1.	Boundary Value Testing – It is based on concept ‘error aggregates at boundaries’. In this technique, testing is done extensively to check for defects at boundary conditions. For example- If a field accepts value from 1 to 100 then testing is done for values 0, 1, 2, 99, 100 and 101.
2.	Equivalence partitioning – It is also known as Equivalence Class Partitioning. Equivalence partitioning technique is used in black box and grey box testing types. Equivalence partitioning classifies test data into positive Equivalence classes and negative Equivalence classes. Such classification ensures that both positive and negative conditions are tested. Equivalence partitioning is mainly used to reduce number of test cases by identifying different sets of test data that are not the same and only executing one test data from each set of test data.
3.	State Transition Testing - It is used to validate allowed and disallowed states and transitions from one state to another as a result of various input data.
4.	Decision Table Testing - This approach creates test cases based on various possibilities / conditions. It considers multiple test cases in a decision table format where each condition is checked and fulfilled to pass the test and provide accurate output. It is preferred in case of various input combinations and multiple possibilities.
5.	Graph-Based Testing - It is similar to a decision-based test case design approach where the relationship between links and input cases are considered.
6.	Error Guessing Technique - This method of designing test cases is about guessing the input and output to fix any defects present in the system. It depends on the skills and judgment of the tester.

The 3 main levels of Test Estimation in Agile:- 	
1) Project or Proposal level is the one in which Quick Function Point Analysis is done during the initial phases of the Project development.
2) Release Level includes assigning the story points to the user stories. This helps in defining the order of the user stories based on the priority and it also help in deciding which stories can be taken in current release and which can be taken later.
Story Points estimations is a comparative analysis to roughly estimate the product backlog items with relative sizing. The team members for estimating user stories include: Product Owner, Scrum Master, Developers, Testers, and other Stake holders.
3) Sprint Level is the one where the user stories are broken into the tasks and estimated hours are assigned to the tasks according to their complexity. Here, we also define the person responsible for the task along with the status of the tasks.
This information can be later used to calculate the budget for the Agile project. Calculation of Budget is crucial to make sure that the project does not go over the budget due to the pre and post iteration tasks or some other reasons.
Agile Poker is a well-known app for Jira for quick and convenient planning and estimations for both remote and co-located teams.

Most Prominent Test Estimation Techniques in Waterfall: -
1) Test Point estimation is a simple and easily understandable estimation technique that is widely used across the software testing spectrum. Iterative phases and simplicity are the most important features of this particular technique.
2) Work-phase based estimation is used for making a guess estimate on a particular phase (normally the shortest and simplest of the phases) and then the testing team gradually add on other phases into the initial estimation and finally comes up with an appropriate estimation.
3) Use-Case Point estimation technique is the estimation on the use cases where the unadjusted actor weights and unadjusted use case weights are used to determine the software testing estimation.

RTM - A requirements traceability matrix is a document that demonstrates the relationship between requirements and other artifacts viz. test cases, test results, and issues. It is used to prove that requirements have been fulfilled. A good RTM document should have bidirectional traceability. 

Bidirectional traceability is the ability to trace forward (e.g., from requirements to test cases to test results to issues) and backward (e.g., from issues to test cases to requirements).
You should also be able to trace back from requirements to business goals / objectives (to answer why the requirement is there).

Advantages of RTM: - 
Meeting Goals Traceability follows the life of a requirement. It starts at the time a requirement originates and continues on through fulfillment of the requirement.
Running the Right Tests Requirement traceability also helps quality assurance (QA) team understand what exactly needs to be tested. This improves test coverage by mapping test cases back to each requirement.
Making Decisions Traceability can also be used for decision-making throughout product development. Helps understand how product design will be impacted by requirements. And if a requirement changes, it helps to analyze the impact of that change across development.
Managing Projects Traceability is also useful for managing projects. It helps to know exactly the progress of the project. It also helps to manage the scope of your requirements.

Risk: - It is a potential problem or an activity / event that may compromise the success of a software project development.

What is Risk Management?
Project risk management is the process of identifying, analyzing (Impact Assessment) and then responding (Develop Strategies) to any risk that arises over the life cycle of a project to help the project remain on track and meet its goal.

Risk Evaluation
1. Identification Risk identification must include whether the risk is first and foremost & preventable. Cost, performances, and schedules are some of the business variables that may be impacted by any category of risk.
External risks originate outside and are not in the businesses’ control, such as natural disasters. External risks are not preventable. 
2. Impact Assessment Determine the probability and impact of certain risky events. Anticipated risks should be rated according to their degree of probability. Risks should be categorized as high, medium, or low probability.
3. Develop Risk Mitigation Strategies Risk mitigation strategies and implementations should be developed for risks categorized as high or medium probability. Low probability risks may be monitored for impact but are less important in this step. Below are the four types of risk mitigation strategies. 
•	Avoid: Risks that involve a high probability for taking place and impacts high financial loss should be avoided.
•	Transfer: Risks that may have a low probability for taking place but would have a large financial impact should be mitigated by sharing, transferring, or outsourcing. E.g., by purchasing insurance, forming a partnership, or outsourcing.
•	Accept: If the cost involved in mitigating the risk is more than the cost of tolerating the risk, the risks should be accepted and carefully monitored.
•	Limit: The most common risk mitigation strategy is risk limitation wherein businesses take some type of action to address a perceived risk and regulate their exposure. Risk limitation usually employs some risk acceptance and risk avoidance.

How will you calculate ROI?
ROI is calculated by subtracting the initial value of the investment from the final value of the investment (which equals the net return), then dividing this new number (the net return) by the cost of the investment, and, finally, multiplying it by 100.

What are Test Coverage Metrics?
Test coverage metrics can be divided into three: code level metrics, feature level metrics and application-level metrics. There are various test coverage formulas to calculate these results and generate test coverage reports. 
Code level metrics - Test Execution Coverage
It is also called as executed tests and it is a percentage of executed tests out of the total number of tests.
 
Feature level metrics - Requirements coverage
Requirement’s coverage is used to determine how well the test cases cover the software requirements. For that, you simply need to divide the number of requirements covered by the total number of scoped requirements for a sprint, release, or project.
 
Test cases by the requirement
This metric is used to see what features are being tested and the number of tests that aligned with a requirement. Most of the requirements contain multiple test cases. It is very important to know which test cases are failed for a particular requirement to rewrite the test cases for specific requirements.
 
This metric is very important for stakeholders as it shows the progress of the software development.
Application-level metrics - Defect Density
Defect density is a measure of the total number of known defects divided by the size of the software entity being measured.
 
It is used to identify the areas which require automation. If defect density is high for the specific functionality, then it requires retesting. To reduce the efforts of retesting, test cases for known defects can be automated.

Requirements without Test Coverage
After calculating the requirements coverage, you will find some requirements which are not covered. Now, it is important to know about each requirement which has not been covered and what stage the requirement is in.
 
This metric helps test engineers and developers to identify and eliminate uncovered requirements from total requirements before they send them to the production phase.

 What is Test Coverage Matrix: - TCM is a matrix table which is used to make sure that all the possible conditions / features that are to be tested are thought of. It also helps in identifying the probable gaps. It can be seen as a checklist which ensures that the functionality of the given screen is verified in all the possible combinations.

9 Ways to Measure the Health of Your Sprints
1. Running pace: To monitor progress daily
2. Pace: To see the amount of work done after the sprint ends
3. Velocity: To see velocity across all sprints in a project
4. Remaining capacity: Giving insight into how the team is progressing
5. Sprint progress: To know how much work is completed 
6. Sprint forecast: To see the time forecasted by AI
7. Planned vs. Actual (Diff. FR. Plan): To see the difference between planned & actual hours spent
8. Sprint burndown: To check team progress towards the Sprint Goal
9. Cumulative flow: To check the correlation of how much work was done, is in progress, and is to be done

Difference between Quality Assurance Engineer, Quality Analyst and Software Tester?
A Software Tester finds bugs in software. Generally active at the end of a coding cycle. Examines code modules.
A Quality Assurance Engineer ensures a good customer experience. Is active throughout the product lifecycle. Studies and improves process and product.
A Quality Analyst deals more with the management stuff such as methods and techniques of development, project analysis, checklists, etc. Is active through the whole product life cycle (SDLC) and heads the process of software maintenance. 
Software Testing is a way of exploring the system to check how it operates and to find the possible defects.
 
Agile Methodology FAQs
1) As a tester what should be your approach when requirements change continuously? 
•	Write generic test plans and test cases, which focuses on the intent of the requirement rather than its exact details
•	Make sure team understand the risks involved in changing requirements especially at the end of the sprint
•	To understand the scope of change, work closely with the product owners or business analyst
•	Until the feature is stable, and the requirements are finalized, it is best to wait if you are going to automate the feature
2) List out the pros and cons of exploratory testing (used in Agile) and scripted testing? 
Exploratory Testing	Scripted Testing
- It requires less preparation
- Easy to modify when requirement changes
- Works well when documentation is scarce	- Test preparation is usually time-consuming
- Difficult to modify when requirement changes
- Same steps are tested over and again
- Difficult to present progress and coverage to management	- Very useful in case testing against legal or regulatory requirements

3) Explain the difference between Extreme programming and Scrum?
Scrum	Extreme Programing (XP)
- Scrum teams works in sprints that usually last for two to four weeks	- XP team works in iteration that last for one or two weeks
- Scrum teams do not allow change into their iterations	- XP teams are more flexible and allow changes into their iterations
- In scrum, the product owner prioritizes the product backlog but the team decides the sequence in which they will develop the backlog items	- XP team works in strict priority order, features to be developed are prioritized by the customer
- Scrum does not prescribe any engineering practices	- XP does prescribe engineering practices

18) What are the differences between RUP (Rational Unified Process) and Scrum methodologies? 
RUP (Rational Unified Process)	SCRUM
- Formal Cycle is defined across four phases, but some workflows can be concurrent	- Each sprint is a complete cycle
- Formal project plan, associated with multiple iterations is used.	- No end-to-end project plan. Next iteration plan is determined at the end of the current iteration
- Scope is predefined ahead of the project start and documented in the scope document. During the project, scope can be revised.	- It uses a project backlog instead of scope document
- Artifacts include Scope Document, formal functional requirements document, system architecture document, development plan, test scripts, etc.	- Operational software is the only formal artifacts
- Recommended for long term, large, enterprise level projects with medium to high complexity	- Recommended for quick enhancements and organization that are not dependent on a deadline

4) What is an epic, user stories and task? 
Epic: Epics can be broken down into specific pieces of work, called Features. Epics are used to organize the work and to create a hierarchy.
Features: These are based on the needs and requests of customers / end users and is split as necessary to be delivered by the Agile teams. 
User Stories: It defines the actual business requirement. It is generally created by the product owner.
Task: To accomplish the business requirements, development team create tasks. 
5) Explain what is re-factoring? 
Modification of the code without changing its functionality to improve the performance is called Re-factoring. 
6) Explain how you can measure the velocity of the sprint with varying team capacity? 
First method – completed story points X team capacity: If you measure capacity as a percentage of a 40 hours weeks
Second method – completed story points / team capacity: If you measure capacity in man-hours
For our scenario second method is applicable. 
21) Explain what is Velocity in Agile? 
Velocity is a metric that is calculated by addition of the efforts associated with all the completed user stories in an iteration. It predicts how much work Agile can complete in a sprint and how much time it will require to complete a project.
7) Mention the key difference between sprint backlog and product backlog? 
Product backlog: It is owned and maintained by the product owner. It contains all features and requirements of the product. It is created in Sprint Zero.
Sprint backlog: It can be treated as the subset of product backlog. It contains features and requirements related to a particular sprint only. It is created in Sprint Planning meeting and is owned by development team.
8) In Agile mention what is the difference between the Incremental and Iterative development? 
Iterative: The software is developed and delivered to the customer and based on the feedback the software is again developed in releases and sprints till the final product is achieved.
Release 1: Sprint 1, 2… n
Release n: Sprint 1, 2…. n
Incremental: Software is developed in parts or increments. In each increment, a portion of the complete requirement is delivered. 
9) Explain what is Spike and Zero sprint in Agile? What is the purpose of it? 
Sprint Zero: It is introduced to perform some research before initiating the first sprint. It can be defined as the preparation step to the first sprint. Activities like setting development environment, preparing product backlog etc. need to be done before starting the first sprint and hence it is treated as Sprint zero.
Spikes: They are type of user stories that are used for activities like research, exploration, design and even prototyping. Within sprints, there may be some technical issues or design problem in the project which needs to be resolved on priority. To provide the solution to this problem “Spikes” are created. Spikes are of two types - Technical Spikes and Functional Spikes. 
16) Explain what is tracer bullet? 
It can be defined as a spike with the current architecture or current technology set or the current set of best practices. The purpose of a tracer bullet is to examine how an end-to-end process will work and if, at all, it is feasible or not. It is not a throw away code but might just be a narrow implementation of the functionality.
10) What is test driven development (TDD)? 
It is a Test-first development technique in which developer writes an automated test case before writing the complete production code. Next, the test is run and based on the result, code is refactored to fulfill the test requirement.
11) Prototypes and Wireframes are widely used as part of? 
Prototypes and Wireframes are prototypes that are widely used as part of Empirical Design. 
12) Explain what is Application Binary Interface? 
It is a specification written in binary form for ensuring portability of applications across different platforms and environments. In other words, it describes the low-level interface between an application and the operating system.
13) Explain burn-up and burn-down chart in Agile? 
Burn-up and burn-down charts are used to keep track of the progress of the project. Burn-up charts represent how much work has been completed in any project whereas Burn-down chart represents the remaining work in a project.
 14) Explain what is Scrum ban? 
It is a software development model that is a combination of Scrum and Kanban. Scrumban is considered for maintaining projects in which there are frequent maintenance or unexpected user stories or programming errors. Using this approach, the team’s workflow is guided in a way that allows minimum completion time for each user story or programming error. 
30) Mention what is the difference between Scrum and Agile? 
Scrum: It is a process in which sprint is a basic unit of development. It has product owner, scrum master, scrum team. Each sprint is followed by a sprint planning meeting, where the tasks for the upcoming sprint are identified and estimated. By each sprint, the team creates a finished portion of the product. 
Agile: It is a practice in which each sprint comprises a team working through a full software development cycle including requirement gathering & analysis, design, coding, testing, and acceptance testing when a product is demonstrated to stakeholders.
15) What is story points / efforts / scales? 
It is a way of estimating user stories. It is used to discuss the difficulty of the story without assigning actual hours. The most common scale used is a Fibonacci sequence (1,2,3,5, 8,13, ….100) although some teams use linear scale (1,2,3,4….), Powers of 2 (1,2,4,8……) and cloth size (XS, S, M, L, XL). 
17) What is a test stub? 
A test stub is a small code that mimics a specific component in the system and can replace it. Its output is same as the component it replaces.
19) Why Continuous Integration is important for Agile? 
•	It helps maintain release schedule on time by detecting bugs or integration errors
•	Due to frequent agile code delivery, stable quality of build is ensured
•	It helps to maintain the code quality and bug free codebase
•	Continuous integration helps to check the impact of work on branches to the main trunk if development work is going on branches using automatic building and merging function
20) What testing is done during Agile? 
The primary testing activities during Agile is - automated unit testing and exploratory testing. Apart from this, depending on project requirements, a tester may execute Functional and Non-functional tests on the Application Under Test (AUT).
22) What are the qualities a good Agile tester should have? 
A good Agile tester should have following qualities
•	He should know Agile concepts and principals.
•	He should be able to understand the requirements quickly.
•	He should be able to analyze the risk involved as requirements keep changing.
•	He should be able to prioritize the work based on the requirements.
•	He should be able to communicate effectively and successfully as it requires a lot of communication with developers and business associates.
23) Who are all involved in the Agile team? / Define the roles in Scrum?
•	Product Owner has the responsibility of managing the product backlog. Works with end-users and customers and provides proper requirements in the form of user stories to the team to build the proper product.
•	Scrum Master ensures proper workflow for the team. Scrum master works with the scrum team to make sure each sprint gets completed on time.
•	Scrum Team: Each member of the team should be self-organized, dedicated, and responsible for the high quality of the work.
•	Development Managers: They hire right people and introduce them with the team
24) Mention in detail what are the roles of Scrum Master? 
Scrum Master key responsibilities involves
•	Understand the requirements and turn them into workflow for the team
•	Monitoring and Tracking
•	Communication and Reporting 
•	Process Check Master
•	Quality Check Master
•	Resolve impediments / obstacles
•	Resolve Conflicts
•	Lead all the meetings
•	Shield the team and performance feedback
25) Mention what are the Agile quality strategies? 
•	Re-factoring
•	Reviews and Inspection
•	Static and dynamic code analysis
•	Short feedback cycles
•	Sprint demos
•	All hands demo
•	Non-solo development
•	Light weight milestone reviews
•	Standards and guidelines
26) Mention what are the tools that can be useful for screenshots while working on Agile projects? 
While working on Agile projects you can use tools like 
•	BugDigger
•	BugShooting
•	Snagit
•	qTrace
•	Bonfire
•	Usersnap
27) Mention what are the advantages of maintaining consistent iteration length throughout the project? 
The advantages are 
•	It helps team to objectively measure progress
•	It provides a consistent means of measuring team velocity
•	It helps establish a consistent delivery pattern
28) If a timebox (iteration) plan needs to be reprioritized who should re-prioritise it? 
It should include whole team, product owner, and developers. 
31) Mention what are the challenges involved in AGILE software development? 
Challenges involved in Agile Software development include
•	Risk is involved as requirements keep changing
•	It requires more testing and customers involvement
•	It requires more planning and impacts management more than developers
•	Each feature needs to be completed before moving to the next
•	All the code must work fine to ensure application is in working state
32) When not to use Agile? 
Before using Agile methodology, you must ask following questions 
•	Are requirements flexible
•	Is functionality split-able
•	Is customer available
•	Is it really time constrained?
•	Is team skilled enough
33) Explain how can you implement scrum in an easy way to your project? 
These are the tips which can be helpful to implement scrum in your project. 
•	Get the product backlog in order
•	Get an idea of the size of the product backlog items
•	Determine sprint duration & sprint requirement and complete the sprint backlog
•	Determine the sprint budget for team and break requirements into tasks
•	Collaborate workspace- a center of all team discussion, which includes plans, roadmaps, key dates, sketches of functionality, issues, log, status reports, etc.
•	Make sure one feature at a time is completed before moving on to the next. A sprint should not be aborted unless there is no other option
•	Attend a daily stand-up meeting. In meeting you need to mention, what have been achieved since the last meeting, what will they achieve before the next meeting and is anything holding up their progress
•	Use burndown chart to track daily progress
•	At the end of the sprint- hold a sprint review / retrospective meeting, mention what is achieved or delivered in the sprint.
34) Explain what does it mean by product roadmap? 
A product roadmap is referred for the holistic / complete view of product features. It also creates the product vision.
35) What is Agile Testing?
Agile Testing is a practice that a QA follows in a dynamic environment where testing requirements keep changing according to customer needs. It is done in parallel to the development activity where the testing team receives frequent small codes from the development team for testing.

36) Explain the difference between a traditional Waterfall model and Agile testing?
Agile testing is done in parallel to the development activity whereas a traditional waterfall model testing is done at the end of the development.
As done in parallel, agile testing is done on small features whereas, in a waterfall model, testing is performed on the whole application.

37) Explain Pair Programming and its benefits?
Pair programming is a technique in which two programmer works as a team in which one programmer writes code and other one reviews that code. They both can switch their roles. Below are the benefits.
•	Improved code quality: As the second partner reviews the code simultaneously, it reduces the chances of mistake.
•	Knowledge transfer is easy: One experienced partner can teach another partner about the coding techniques.

38) What is a Taskboard in Agile?
Taskboard is a dashboard that shows the progress of the project. It contains:
•	User Story: It has the actual business requirement.
•	To Do: Tasks that can be worked on.
•	In Progress: Tasks which are in progress.
•	Done: Completed tasks.
•	To Verify: Tasks pending for verification or testing

39) How can QA add value to an agile team?
QA can provide value addition by thinking out of box about the various scenarios to test a user story. They can provide quick feedback to the developers about whether new functionality developed is working fine or not.

40) What is the importance of daily stand-up meetings?
Daily stand-up meeting is essential for any team in which team discuss,
•	How much work has been completed since the last meeting, what will they achieve before the next meeting?
•	Is there anything holding up their progress or is there any technical challenges?
•	What are the plans to resolve technical issues?
•	What need to be done to complete the projects etc.?
41) What is Agile manifesto?
Agile manifesto defines an iterative and people-centric approach to software development. It has 4 key values and 12 principals.
 

 
REST API Automation (Using Java)
RestAssured is an API used to automate REST services or APIs but not SOAP services. 
Refer – www.jsonpath.com
	www.jsonpathfinder.com

Dependencies required to be added in pom.xml: 
•	RestAssured
•	json-simple [Example –To read data from json file using json-simple api]
 

 

 

 

 
•	apache-poi / jxl (for data driven approach)

import io.restassured.RestAssured
public class Demo1_GET_Request{
@Test
Public void getWeatherDetails(){
PreemptiveBasicAuthScheme auths = new PreemptiveBasicAuthScheme();//Authentication
auths.setUserName(“username”);
auths.setPassword(“pwd”);
RestAssured.authentication = auths;
RestAssured.baseURI = “Base URL”; 				//Specify base URI
RequestSpecification request= RestAssured.given();			//Create request object
Response response = request.request(Method.GET, “/path parameter”) 	//Create response object
String body = response.getBody().asString(); 			//asString converts from JSON to String
int statusCode = response.getStatusCode();				//Validating status code
Assert.AssertEquals(statusCode, 200);
String statusLine = response.getStatusLine();			//Validating status line
Long resTime= response.getTime(); 				//Validating Response Time
String contentType = response.header(“Content-Type”); 		//Validating Header
Headers headers = response.headers(); 				//Capture all headers
for(Header header:headers){
System.out.println(header.getName);
System.out.println(header.getValue);
}
Assert.assertEquals(body.contains(“Delhi”), true); 			//Validating Response body
String successCode = response.jsonPath().get(“SuccessCode”); 		//Validating a field in response body
}
}

public class Demo2_POST_Request{
@Test
Public void postRequest(){
RestAssured.baseURI = “Base URI”; 				// Specify base URI
RequestSpecification request = RestAssured.given(); 			// Create request object
JSONObject requestParams = new JSONObject();  			//JSONObject (like HashMap) for sending payload
requestParams.put(“FirstName”, “Vijay”);
requestParams.put(“LastName”, “Sah”);
requestParams.put(“UserName”, “VijaySah”);
requestParams.put(“Password”, “VijaySah”);
requestParams.put(“Email”, “Vijay.Sah@gmail.com”);
request.header(“Content-Type”, “application/json”);
request.body(requestParams.toJSONString());
Response response = request.request(Method.POST, “/path parameter”);	 //Create response object
//Response response = request.request(Method.PUT, “/path parameter”); 	//PUT request example
//Response response = request.request(Method.DELETE, “/path parameter”); 	// DELETE request example
String body = response.getBody().asString(); 				//asString converts from JSON to String
int statusCode = response.getStatusCode();
Assert.AssertEquals(statusCode, 201);
String successCode = response.jsonPath().get(“SuccessCode”);		 	//Verify success response
//JSONObject jsonObject = new JSONObject(response.getBody().asString());
Assert.assertEquals(successCode, “OPERATION_SUCCESS”);
}
}

public class Demo3_POST_Request_DataDriven{
@Test(dataProvider=”empDataProvider”)
Public void postRequest(String ename, String esal, String eage){
RestAssured.baseURI = “Base URI”; 				// Specify base URI
RequestSpecification request = RestAssured.given(); 			// Create request object
JSONObject requestParams = new JSONObject(); 			//JSONObject (like HashMap) for sending payload
requestParams.put(“Name”, ename);
requestParams.put(“Salary”, esal);
requestParams.put(“Age”, eage);
request.header(“Content-Type”, “application/json”);
request.body(requestParams.toJSONString());		//Using JSONObject or Map object
//request.body(new File(“./Payload.json”)); 			//Using file object of json file in proj directory, 
//request.body(ep);					//Using POJO, EmployeePOJO ep = new EmployeePOJO(“Abc”, “1000”,”30”); 
Response response = request.request(Method.POST, “/path parameter”) 	//Create response obj
String body = response.getBody().asString(); 			//asString converts from JSON to String
int statusCode = response.getStatusCode();
Assert.AssertEquals(statusCode, 201);

@DataProvider(name=”empDataProvider”)
String[][] getEmpData(){
//String empData[][] = {{“abc”, “3000”, “40”}, {“xyz”, “4000”, “30”}, {“pqr”, “5000”, “50”}}
path=””;
int rownum = XLUtils.getrowcount(path, “sheet1”);
int colcount = XLUtils.getcellcount(path, “sheet1”, 1);
String empData[][] = new empData[rownum][colcount];
for(int i=1; i<=rownum; i++) {
for(int j=0; j<colcount; j++) {
		empData[i-1][j]=XLUtil.getCellData(path, “sheet1”,i ,j);
}
}
return empdata;
}

REST API Automation (Using Java - BDD)
import static io.restasured.RestAssured.*;
import static io.restassured.matcher.RestAssuredMatchers.*;
import static org.hamcrest.Matchers.*;
import org.testng.annotations.Test;
@Test(priority=3)
	public void testParamsAndHeaders() {
		given()
			.param("MyName", "Pavan")				// Query / filter parameter
			.header("Content-Type", "application/json")
			.auth().none() 					//auth().basic("ID","Pwd") 
									//auth().digest("ID","Pwd") 
									//auth().form() 
									//auth().oauth() 
									//auth().oauth2("accesstoken")
			//.contentType(ContentType.JSON) 			//.contentType("application/json")   //With post request
			//.body(map)					//With post request
		.when()
			.get(url1)
			//.post("some valid url")
		.then()
			.statusCode(200)
			.log().all()						//logs request and response for api
			.assertThat().body("msg", equalTo("Student added"))	
                                             //.body("msg", equalTo("Student added")) 		//Validate single content
			.body("x.title", hasItems("Value1", "Value2"))		//Validate multiple content
			//response.jsonPath().get(“SuccessCode”);		//Validating a field in response body						//Assert.assertEquals(body.contains(“Delhi”), true);	//Validating text in response body
			//.assertThat().header("Content-Type", "application/json")
			.header("Content-Type", "application/json"); 		//response.header(“Content-Type”);
	}

public class Demo6_BasicValidationsXML {
	String url = "http://thomas-bayer.com/sqlrest/CUSTOMER/15";
	
	@Test(priority=1)
	public void testSingleContent() {
		given()
		.when()
			.get(url)
		.then()
			.statusCode(200)
			.log().all()
			.body("CUSTOMER.ID", equalTo("15"));
	}

	@Test(priority=2)
	public void testMultipleContent() {
		given()
		.when()
			.get(url)
		.then()
			.statusCode(200)
			.log().all()
			.body("CUSTOMER.ID", equalTo("15"))
			.body("CUSTOMER.FIRSTNAME", equalTo("Bill"))
			.body("CUSTOMER.LASTNAME", equalTo("Clancy"))
			.body("CUSTOMER.STREET", equalTo("319 Upland Pl."))
			.body("CUSTOMER.CITY", equalTo("Seattle"));
	}

	@Test(priority=3)
	public void testMultipleContentInOneGo() {
		given()
		.when()
			.get(url)
		.then()
			.body("CUSTOMER.text()", equalTo("15BillClancy319 Upland Pl.Seattle"));
	}


	@Test(priority=4)
	public void testUsingXpath1() {
		given()
		.when()
			.get(url)
		.then()
			.body(hasXPath("/CUSTOMER/FIRSTNAME", containsString("Bill")));
	}

	@Test(priority=5)
	public void testUsingXpath2() {
		given()
		.when()
			.get("http://thomas-bayer.com/sqlrest/INVOICE")
		.then()
			.body(hasXPath("/INVOICEList/INVOICE[text()=30]"));
	}
}

 

 

 

 

 

 
 

 

 

 
Refer:- https://automationreinvented.blogspot.com/2020/09/api-authentication-methods-automation.html

 

 

 
POJO: Plain Old Java Object: POJO Serialization: 
 
EmployeePOJO ep = new EmployeePOJO("morpheus", "leader", new String[] {"Java", "C"}, "XYZ", "morpheus@xyz.com");

Right click on Java fileSource Generate Getters and Setters…
Right click on Java fileSource Generate toString…
Refer:- https://www.youtube.com/watch?v=XAT-QsTjJE0

POJO DeSerialization: If POJO is invalid, we get JsonMappingException
 
 

 

 

 

 

#	REST (HTTP/HTTPS, WADL)	SOAP (WSDL)
1	REST uses HTTP/HTTPS.	SOAP can use almost any transport to send the request (for example we can have SOAP Messages over SMTP).
2	REST is totally stateless operations.	SOAP supports stateful calls too.
3	No such contract exists in case of REST.	SOAP has stricter contract between applications in the form of WSDL.
4	REST APIs can be consumed using simple GET requests, REST response can be cached.	This is not possible with SOAP.
5	REST is lighter. That’s why REST is preferred choice in mobile devices and PDA's.	SOAP requires an XML wrapper around every request and response (SOAP Headers, XML tags etc).
6	REST supports other formats too for example JSON	SOAP message format is restricted to XML only
7	REST is simpler in terms of development as compared to SOAP	
8	Browsers can handle REST easily as compared to SOAP as REST is based on HTTP.	SOAP is another wrapper over HTTP.
9	REST (REpresentational State Transfer) enforces a stateless client server design where web services are treated as resource which can be accessed and identified by their URL.
Web services written by applying REST Architectural concept are called RESTful web services which focus on System resources and how state of Resource should be transferred over http protocol.	SOAP (Simple Object Access Protocol) is a protocol for exchanging structured information in XML form. SOAP defines what is in the message and how to process it, along with a set of encoding rules for data types, representation for procedure calls and responses.
10	 	 


 

 

 

 

 

 

 

 
REST API Automation (Using Python)
API is an interface / web service that allows / grants access to one application to communicate with another application. In other words, it is a set of rules that allow programs to talk to each other. The developer creates the API on the server and allows the client to talk to it.
REpresentational State Transfer (REST), is a popular architectural style of APIs for web services. It consists of a set of guidelines designed to simplify client / server communication. REST APIs make data access much more straightforward and logical.
The Request: - When you want to interact with data via a REST API, this is called a request. A request is made up of the following components:
Endpoint – The URL that delineates what data you are interacting with. Similar to how a web page URL is tied to a specific page, an endpoint URL is tied to a specific resource within an API.
Method – Specifies how you’re interacting with the resource located at the provided endpoint. REST APIs can provide methods to enable full Create, Read, Update, and Delete (CRUD) functionality. Here are common methods most REST APIs provide:
•	GET – Retrieve data
•	PUT – Replace / Update data
•	POST – Create data
•	DELETE – Delete data
Data – If you’re using a method (PUT / POST) that involves changing data in a REST API, you’ll need to include a data payload with the request that includes all data that will be created or modified.
Headers – Contain any metadata that needs to be included with the request, such as authentication tokens, the content type that should be returned, and any caching policies.
The Response: - When you perform a request, you’ll get a response from the API. Just like in the request, it’ll have a response header and response data, if applicable. The response header consists of useful metadata about the response, while the response data returns what you actually requested. This can be any sort of data, as it’s really dependent on the API. The text is usually returned as JSON, but other markdown languages like XML are also possible. 

Types of Requests
Type	Example
GET	query = {'lat':'45', 'lon':'180'}    # Params is a dictionary
response = requests.get('http://api.open-notify.org/iss-pass.json', params=query)
DELETE	response = requests.delete(url)
PUT	response = requests.put('https://httpbin.org/put', data = {'key':'value'})
POST	response = requests.post('https://httpbin.org/post', data = {'key':'value'})

Scenario 1: # Retrieve response in different format
response.content 			# Return the raw bytes of the data payload
response.text 				# Return a string representation of the data payload
response.json() 				# This method is convenient when the API returns JSON

Scenario 2: # Retrieve headers and status code from response
response.headers
response.status_code

Scenario 3: # Retrieve value of a node from dictionary
response.headers.get(‘content-length’) 
response.headers[‘content-length’]

Scenario 4: #Parse data in string format and convert into JSON
json_res=json.loads(response.text) 

Scenario 5: #Convert a JSON into dictionary
import json
some_json = ‘{“name":"John", "age":30, "city":"New York"}' 
dict_res = json.loads(some_json) 
print(dict_res["age"]) 

Scenario 6: #Convert a dictionary into JSON
some_dictionary = {
  "name": "John",
  "age": 30,
  "city": "New York"
}

json_res = json.dumps(some_dictionary)
page_list = jsonpath.jsonpath(json_res, ‘total_pages’) 		##Retrieve value of a node from JSON

Authentication type in API: - Authentication refers to giving a user permission to access a particular resource. Since, everyone can’t be allowed to access data from every URL, one would require authentication primarily. To achieve this authentication, typically one provides authentication data through Authorization header or a custom header defined by server.

Types of Authentication
Type	Required	Description	Example
Basic Authentication	Username, Password	Username and password are passed over the network in an unencrypted form	import requests 
from requests.auth import HTTPBasicAuth 

response = requests.get(url, auth = HTTPBasicAuth('user', 'pass'))
Digest Authentication	Username, Password	Digest verification can be done without sending the username and password over the network	response = requests.get(url, auth = HTTPDigestAuth('user', 'pass'))

Digest access authentication verifies that both parties to a communication know a shared secret (password)
Bearer Authentication	One Token		my_headers = {'Authorization’: 'Bearer {access_token}'}
response = requests.get(url, headers=my_headers)
OAuth 1 Authentication	Two Tokens	Requires client to send two security tokens for each API call, and uses both to generate the signature	import requests
from requests_oauthlib import OAuth1

auth = OAuth1('APP_KEY', 'APP_SECRET', ..., 'OAUTH_TOKEN', 'OAUTH_TOKEN_SECRET')
requests.get(url, auth=auth)
OAuth 2 and OpenID Connect Authentication	One Token	Signature is not required for the actual API calls once the token has been generated	The requests-oauthlib library also handles OAuth 2, the authentication mechanism supporting OpenID Connect.
Other Authentication			Some of the best have been brought together under the requests organization, including: Kerberos, NTLM

Cookie validation
response.cookies
Get the values from cookies in the same manner as headers

Use Sessions to Manage Access Tokens
session = requests.Session()
session.headers.update({'Authorization': 'Bearer {access_token}'})
response = session.get('https://httpbin.org/headers')

TooManyRedirects 
try:
response = requests.get('http://api.open-notify.org/astros.json')
response.raise_for_status()
# Code here will only run if the request is successful
except requests.exceptions.TooManyRedirects as error:
print(error)
response = requests.get('http://api.open-notify.org/astros.json', max_redirects=2)
response = requests.get('http://api.open-notify.org/astros.json', allow_redirects=False)

How to Make Robust API Requests

try:
    	response = requests.get('http://api.open-notify.org/astros.json', timeout=5)
response.raise_for_status()
    	# Code here will only run if the request is successful
except requests.exceptions.HTTPError as errh:
    	print(errh)
except requests.exceptions.ConnectionError as errc:
    	print(errc)
except requests.exceptions.Timeout as errt:
    	print(errt)	
except requests.exceptions.RequestException as err:
    	print(err)

Rest API Response Codes
Here are some sample Response Codes which we will normally see while performing REST API testing over POSTMAN or over any REST API client.
#1) 100 Series These are temporary Responses
•	100 Continue
•	101 Switching Protocols
•	102 Processing
#2) 200 Series The client accepts the Request, being processed successfully at the server.
•	200 – OK
•	201 – Created
•	202 – Accepted
•	203 – Non-Authoritative Information
•	204 – No Content
•	205 – Reset Content
•	206 – Partial Content
•	207 – Multi-Status
•	208 – Already Reported
•	226 – IM Used
#3) 300 Series Most of the codes related to this series are for URL Redirection.
•	300 – Multiple Choices
•	301 – Moved Permanently
•	302 – Found
•	303 – Check Other
•	304 – Not Modified
•	305 – Use Proxy
•	306 – Switch Proxy
•	307 – Temporary Redirect
•	308 – Permanent Redirect
#4) 400 Series These are specific to client-side error.
•	400 – Bad Request
•	401 – Unauthorized
•	402 – Payment Required
•	403 – Forbidden
•	404 – Not Found
•	405 – Method Not Allowed
•	406 – Not Acceptable
•	407 – Proxy Authentication Required
•	408 – Request Timeout
•	409 – Conflict
•	410 – Gone
•	411 – Length Required
•	412 – Precondition Failed
•	413 – Payload Too Large
•	414 – URI Too Long
•	415 – Unsupported Media Type
•	416 – Range Not Satisfiable
•	417 – Expectation Failed
•	418 – I’m a teapot
•	421 – Misdirected Request
•	422 – Unprocessable Entity
•	423 – Locked
•	424 – Failed Dependency
•	426 – Upgrade Required
•	428 – Precondition Required
•	429 – Too Many Requests
•	431 – Request Header Fields Too Large
•	451 – Unavailable for Legal Reasons
#5) 500 Series These are specific to the server-side error.
•	500 – Internal Server Error
•	501 – Not Implemented
•	502 – Bad Gateway
•	503 – Service Unavailable
•	504 – Gateway Timeout
•	505 – HTTP Version Not Supported
•	506 – Variant Also Negotiates
•	507 – Insufficient Storage
•	508 – Loop Detected
•	510 – Not Extended
•	511 – Network Authentication Required

Which is better PUT or POST? What is idempotent operation?

PUT	POST
If the URI refers to an already existing resource, an update operation will happen, otherwise create operation will happen if URI is valid.
e.g. PUT /questions/{question-id}	The POST method is used to create a new resource.
e.g. POST /questions
PUT method is idempotent. So, if you send a request multiple times, that should be equivalent to single request modification.	POST is NOT idempotent. So if you retry the request N times, you will end up having N resources with N different URIs created on server.
PUT is for checking if resource exists then update, else create new resource. PATCH is always for updating a resource.	Use POST when you want to add a child resource under resources collection.
Always use PUT for UPDATE operations.	Always use POST for CREATE operations.

PUT vs PATCH: - PUT replaces the resource in its entirety. When a client needs to replace an existing Resource entirely, they can use PUT. 
When you're doing a partial update, use PATCH. For instance, when updating a single field of the Resource, sending the complete Resource representation might be cumbersome and utilizes a lot of unnecessary bandwidth.

Caching in REST APIs: - Being cacheable is one of architectural constraints of REST.  [Uniform, Client-Server, Stateless, Cacheable, Layered, Code on demand]
•	GET requests are cacheable by default – until special condition arises. Usually, browsers treat all GET requests cacheable.
•	POST requests are not cacheable by default but can be made cacheable if either an Expired header or a Cache-Control header with a directive is added to the response to explicitly allow caching.
•	Responses to PUT and DELETE requests are not at all cacheable. 
Java Interview Questions
Singleton class: Java Singleton Pattern is one of the Gangs of Four Design patterns and comes in the Creational Design Pattern category. From the definition, it seems to be a very simple design pattern but when it comes to implementation, it comes with a lot of implementation concerns. To implement a Singleton pattern, we have different approaches but all of them have the following common concepts.
•	Private constructor to restrict instantiation of the class from other classes.
•	Private static variable of the same class that is the only instance of the class.
•	Public static method that returns the instance of the class, this is the global access point for outer world to get the instance of the singleton class.

Wrapper class: It is the type of class that provides a mechanism to convert the primitive data types into the objects and vice-versa. Sometimes you must use wrapper classes, for example when working with Collection objects, such as ArrayList, where primitive types cannot be used (the list can only store objects): To create a wrapper object, use the wrapper class.
The process of converting primitive data types into an object is called boxing. While using a wrapper class, you just have to pass the value of the primitive data type to the constructor of the Wrapper class.
All the wrapper classes Byte, Short, Integer, Long, Double and, Float, are subclasses of the abstract class Number (which in turn is a subclass of Object class). While Character and Boolean wrapper classes are the subclasses of Object class.

Primitive Data Type	Wrapper Class	Constructor Argument
boolean	Boolean	boolean or String
byte	Byte	byte or String
char	Character	char
int	Integer	int or String
float	Float	float, double or String
double	Double	double or String
long	Long	long or String
short	Short	short or String
Need for Wrapper class in Java
Wrapper classes are used to provide a mechanism to ‘wrap’ or bind the values of primitive data types into an object. This helps primitives types act like objects and do the activities reserved for objects like we can add these converted types to the collections like ArrayList, HashSet, HashMap, etc. Also we cannot provide null values to Primitive types but wrapper classes can be null. So wrapper classes can be used in such cases we want to assign a null value to primitive data types.

Advantages of using Wrapper class in Java:
1. Serialization: In Serialization, we need to convert the objects into streams. If we have a primitive value and we want to serialize them then we can do this by converting them with the help of wrapper classes.
2. Synchronization: In Multithreading, Java synchronization works with objects.
3. Collection Framework: The Collection Framework in Java works only with objects. All classes of the collection framework like ArrayList, LinkedList, Vector, HashSet, LinkedHashSet, TreeSet, PriorityQueue, ArrayDeque, etc, work only with objects.
4. java.util package: The package java.util provides many utility classes to deal with objects rather than values.
5. Changing the value inside a Method: If we pass a primitive value using call by value, it will not change the original value. But it will change the original value if we convert the primitive value into an object.
6. Polymorphism: Wrapper classes also help in achieving Polymorphism in Java.

Creating Wrapper Objects: We use the wrapper class to create an object of the wrapper class. To get the value of the data type, we can just print the object. Code to illustrate the creation of Wrapper Objects:

package com.techvidvan.wrapperclasses;
public class WrapperDemo{
public static void main(String[] args){
Integer myInt = 10;
Double myDouble = 11.65;
Character myChar = 'T';
Boolean myBool= true;
System.out.println(myInt);
System.out.println(myDouble);
System.out.println(myChar);
System.out.println(myBool);
}
}
Output:
10
11.65
T
true
Autoboxing and Unboxing in Java
1. Autoboxing: The process to automatically convert the primitive data types into corresponding wrapper class objects is called Autoboxing in Java. This is called Autoboxing because this is done automatically by the Java compiler. For example, char to Character, int to Integer, long to Long, double to Double, float to Float, boolean to Boolean, byte to Byte, and short to Short. Code to understand Autoboxing in Java:

package com.techvidvan.wrapperclasses;
import java.util.ArrayList;
public class AutoboxingExample{
public static void main(String[] args){
//Converting an int primitive data type into an Integer object
int number = 15;
Integer obj=Integer.valueOf(number); //converting int into Integer explicitly
System.out.println(number+ " "+ obj);
//Converting char primitive data type into a Character object
char character = 'a';
Character obj1 = character;
System.out.println(character+ " "+ obj1);
//Using Collection Framework
ArrayList<Integer> arrayList = new ArrayList<Integer>();
arrayList.add(16); //Autoboxing
arrayList.add(35); //Autoboxing
System.out.println(arrayList.get(0));
System.out.println(arrayList.get(1));
}
}
Output:
15 15
a a
16
35
As you can see both primitive data types and objects have the same values. You can use obj in place of num wherever you need to pass the value of num as an object.
2. Unboxing: Java Unboxing is the reverse process of Autoboxing. The process to convert the wrapper class object into its corresponding primitive data type is called Java Unboxing. Code to understand Unboxing in Java:

package com.techvidvan.wrapperclasses;
import java.util.ArrayList;
public class UnboxingExample{
public static void main(String[] args){
Character character = 'R'; 	//Autoboxing
char value = character; 	//Unboxing
System.out.println(value);
ArrayList<Integer> arrayList = new ArrayList<Integer>();
arrayList.add(50); 		//Autoboxing
int num = arrayList.get(0); 	//Unboxing object into int value
System.out.println(num);
}
}
Output:
R
50
Methods of Wrapper Class in Java
The following is the list of some methods that all the subclasses of the Number class implements:
S.No.	Method 	Method Description
1.	typeValue()	Returns the Converted value of this Number object to the specified data type.
2.	compareTo()	It compares this Number object to the specified argument.
3.	equals()	It checks whether this Number object is equal to the specified argument.
4.	valueOf()	Returns an Integer object holding the specified primitive type value.
5.	toString()	Returns a String object holding the value of a specified Integer type argument.
6.	parseInt()	Retrieves the primitive data type of a specified String.
7.	abs()	Returns the absolute value of the specified argument.
8.	ceil()	Returns the smallest integer that is equal to or greater than the specified argument in double format.
9.	floor()	Returns the largest integer that is equal to or less than the specified argument in double format.
10.	round()	Returns the closest long or int according to the return type of the method.
11.	min()	Returns the smaller between two arguments.
12.	max()	Returns the larger between the two arguments.
13.	exp()	Returns e to the power of the argument, i.e. base of the natural logarithms.
14.	log()	Returns the natural logarithm of the specified argument.
15.	pow()	Returns the result of the first argument raised to the power of the second argument.
16.	sqrt()	Returns the square root of the specified argument.
17.	sin()	Returns the value of sine of the specified double value.
18.	cos()	Returns the value of the cosine of the specified double value.
19.	tan()	Returns the value of the tangent of the specified double value.
20.	asin()	Returns the value of the arcsine of the specified double value.
21.	acos()	Returns the value of the arccosine of the specified double value.
22.	atan()	Returns the value of the arctangent of the specified double value.
23.	toDegrees()	Converts the value of the argument to degrees.
24.	toRadians()	Converts the value of the argument to radians.
25.	random()	This method returns a random number.

Code to illustrate some methods of wrapper class:
package com.techvidvan.wrapperclasses;
public class WrapperDemo{
public static void main (String args[]){
Integer intObj1 = new Integer (25);
Integer intObj2 = new Integer ("25");
Integer intObj3= new Integer (35);
//compareTo demo
System.out.println("Comparing using compareTo Obj1 and Obj2: " + intObj1.compareTo(intObj2));
System.out.println("Comparing using compareTo Obj1 and Obj3: " + intObj1.compareTo(intObj3));
//Equals demo
System.out.println("Comparing using equals Obj1 and Obj2: " + intObj1.equals(intObj2));
System.out.println("Comparing using equals Obj1 and Obj3: " + intObj1.equals(intObj3));
Float f1 = new Float("2.25f");
Float f2 = new Float("20.43f");
Float f3 = new Float(2.25f);
System.out.println("Comparing using compare f1 and f2: " +Float.compare(f1,f2));
System.out.println("Comparing using compare f1 and f3: " +Float.compare(f1,f3));
//Addition of Integer with Float
Float f = intObj1.floatValue() + f1;
System.out.println("Addition of intObj1 and f1: "+ intObj1 +"+" +f1+"=" +f );
}
}
Output:
Comparing using compareTo Obj1 and Obj2: 0
Comparing using compareTo Obj1 and Obj3: -1
Comparing using equals Obj1 and Obj2: true
Comparing using equals Obj1 and Obj3: false
Comparing using compare f1 and f2: -1
Comparing using compare f1 and f3: 0
Addition of intObj1 and f1: 25+2.25=27.25

Typecasting in Java:
int n = Integer.parseInt("SomeString"); 				//If primitive int datatype is needed
Integer n = Integer.valueOf("SomeString or int");		//If wrapper Integer object is needed
String s1 = String.valueOf("int or any other data type");

Array in Java: Fixed in size. Can hold same data type elements (if we do not use Object while declaring)

int a[] = new int[5] 						// Static array for int type
//int a[] = {10,20,30,40}						// Another approach

for(int i:a) 							// for-loop only for array
{
println(i)
}

Object a[] = new Object[5];					//Any data type can be stored
//Object a[] = {10,20.55,'a', "Rama", true}			// Another approach
A[0]=10;
a[1]=1.5;
a[2]="abc";
a[3]='a';
a[4]=true

for(Object i:a) 							// for-loop only for array
{
println(i)
}

int a[][] = new int[3][2]  						// Multi or 2D array
//int a[][] = {{10,20},{30,40},{50,60}}				// Another approach
a[0][0] = 10;
a[0][1] = 20;
a[1][0] = 30;
a[1][1] = 40;
a[2][0] = 50;
a[2][1] = 60;

for(int i[]:a)
{
	for(int j:i)
	{
	print(j)
	}
}

String methods:
1. length(), 
2. concat(), 		+
3. equals(), 
3. equalsignorecase(), 
4. contains(), 
5. substring() 		//substring begins at the specified beginIndex and ends at endIndex - 1
6. replace()
7. charAt()
8. str.indexOf('s'), 	str.indexOf('s', 10)		//similar to find in Python
9. str.lastIndexOf('s'),	str.lastIndexOf('s', 20)

Class: It is a collection of variables and methods. Object is an instance of a class. Class is logical entity. Object is physical entity. 

General Rule:
1. Static methods can access static stuffs directly without creating object
2. Static methods can also access non static stuff but through object.
3. Non static methods can access everything (static & non-static stuff) directly without creating object.

Understanding System.out.println():
class Test
{
static String s="Welcome";	//s is a static variable of type String in Test class
}

So, we can find length of variable s through class name, like - Test.s.length() 
[i.e. class.variable.method]. Here length() is a method of String class.

Similarly, we have System class in Java which has a static variable ‘out’ of type PrintStream.

class System
{
static PrintStream out;		//out is a static variable of type PrintStream in System class
}

So, we access println() method of PrintStream class like - System.out.println();

Understanding JDK, JRE, JVM:
JDK: - Java Development Kit. If you want to develop something (some Java applications) using Java, then you need JDK. This is full Java s/w. It also internally contains JRE and JVM.
JRE: - Java Runtime Environment. Sometimes, you do not need to install full Java. If you only install JRE, that is enough. If you want to install any Java based application in your system, JRE must be present in your machine. Or in other words, before any Java based application is installed, first JRE gets installed. It is used for running Java based applications; provides infrastructure to your Java based application. Using JRE you cannot develop your Java applications. If you install JRE separately, only JRE will get installed; JDK will not get installed. It also internally contains JVM but not JDK.
JVM: - Java Virtual Machine. It is the heart of the Java. Responsible for running / executing Java Program. It is also a kind of a program. 

Understanding public static void main(String[] args):
While running your program, JVM (which is responsible for executing your Java program) is always looking for public static void main(). Because JVM developer has written exactly this syntax - public static void main(String[] args) while writing JVM program. JVM starts execution only if it finds this main method in your code. 

Note: Below 4 syntax are all accepted and good
1. public static void main(String[] args)
2. public static void main(String args[])
3. public static void main(String[] abc)
4. public static void main(String abc[])

Method overriding: Redefine the same method from parent class in child class. Method definition should be exactly same; method body can change.
 
class Bank
{
int getRateOfInterest()
	{
	return 0;
	}
}

class SBI extends Bank
{
int getRateOfInterest()
	{
	return 10;
	}
}

class ICICI extends Bank
{
int getRateOfInterest()
	{
	return 12;
	}
}

Types of Inheritance in Java:
1. Single
2. Multilevel
3. Multiple (Not possible in Java using class; but can be done using Interface)
4. Hierarchical
5. Hybrid

Interface:
1. In Interface, by default, all variables are [~ default], static, final. 
2. In Interface, by default, all methods are public, abstract, [~ void].
3. We cannot instantiate Interface; but can create Interface reference variable.

Note: An abstract method has only definition but not implementation.

Interface ITestInt
{
void m1();						//Abstract method
}

class Test implements ITestInt
{
void m1()
	{
	// implement the body
	}
}

ITestInt obj = new ITestInt(); 				// This is invalid
ITestInt obj = new Test(); 				// This is valid

Access Modifiers:
1. public --> most visibility
2. protected 
3. default
3. private --> least visibility

Note: Java does not allow to reduce the visibility of variables/methods

Multiple Inheritance through Interface:
Interface A
{
int a=10;
void display();
}

Interface B
{
int b=10;
void show();
}

class Test implements A, B
{
public void display(){
	print(a);
	}
	
public void show(){
	print(b);
	}
public static void main(){
	Test obj = new Test();
	obj.display();
	obj.show();
	}
}

Package: Collection of classes. For creating package inside another package in eclipse, enter package name like p1.p2.p3 while creating package in eclipse. This will create src/p1/p2/p3 folders in directory.

Types of package:
1. Builtin / pre-defined (example - as in case of import statements. At the end of import statement is some class)
2. User defined

Exception: Throwable is the base class of all the Exceptions. Which has major two classification – Exception & Error (Runtime memory Error, AssertionError)

Checked Exceptions: - InterruptedException, IOException, FileNotFoundException, ClassNotFoundException etc.

Unchecked Exceptions: - ArithmeticException, ArrayIndexOutOfBoundsException, NullPointerException, NumberFormatException etc.

ArrayList: Can store any no of elements. And can store any data type elements. Comes from java.util.ArrayList

//int a[] = new int[5]; 					// Normal array declaration
ArrayList al = new ArrayList();				// Allows all data type elements
ArrayList<String> al = new ArrayList<String>();		// Can store only String type elements
ArrayList<Integer> al = new ArrayList<Integer>();	// Can store only int type elements

al.add("Rest")
al.add("API")
al.add(1, "API") 						//Inserts the item in list
al.remove("API") 					// Remove using element
al.remove(1)						// Remove using index
al.size()							// Length / size of ArrayList object

HashMap: It is a combination of key-value pair.
HashMap map = new HashMap();			//Allows all data type for key, value
HashMap<Integer,String> map=new HashMap<Integer,String>();	//int type key, String type value

for(Map.Entry m:map.entrySet()){
	System.out.println(m);
	System.out.println(m.getkey());
	System.out.println(m.getvalue());
}

map.put(100, "Abcd")		
map.remove(300);					// Removes entry related to key 300

Note: Map Interface is present in Java.util package, which provides mainly three methods KeySet(), entrySet() and values(). These methods are used to retrieve the set view of the keys of the map, key-value pairs of the map, and values of the map respectively. Since these methods are part of Map Interface, so we can use can these methods with all the classes implementing the map interface like TreeMap, HashMap, and LinkedHashMap.
java.util.HashMap.entrySet () method in Java is used to create a set out of the same elements contained in the hash map. It basically returns a set view of the hash map or we can create a new set and store the map elements into them.

// Java program demonstrating use of entrySet()

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.stream.Stream;

class GFG {
	public static void main(String[] args)
	{
		// making map of Integer keys and String values
		Map<Integer, String> map = new HashMap<>();
		
		// adding the key-value pairs to map
		map.put(1, "Geeks");
		map.put(2, "For");
		map.put(3, "Geeks");

		// below are the different and simple ways out of
		// many to iterate over the entrySet()

		// iterating the key value pair using for each loop
		for (Map.Entry<Integer, String> entry :map.entrySet())
		{
			Integer key = (Integer)entry.getKey();
			String value = entry.getValue();

			System.out.println(key + "=" + value);
		}
		
		// iterating the key-value pairs using iterator
		Iterator<Map.Entry<Integer, String> > itr = map.entrySet().iterator();
		
		while (itr.hasNext()) {
			System.out.println(itr.next());
		}
		
		// iterating the key-value pairs using Stream.of()
		// method
		Stream.of(map.entrySet().toArray())
			.forEach(System.out::println);
	}
}

Q #1) What is JAVA?
Answer: Java is a high-level programming language and is platform independent. Java is a collection of objects. It was developed by Sun Microsystems. There are a lot of applications, websites, and games that are developed using Java.
Q #2) What are the features of JAVA?
Answer: Features of Java are as follows:
•	OOP concepts
1)	Inheritance [We create a Base Class in the Automation Framework to initialize WebDriver interface, WebDriver waits, Property files, Excels, etc., in the Base Class. We extend the Base Class in other classes such as Tests and Utility Class. Here we extend one class (Base Class like WebDriver Interface) into other class (like Tests, Utility Class) is known as Inheritance.]
2)	Encapsulation [All the classes in a framework are an example of Encapsulation.]
3)	Polymorphism
a.	Overloaded Methods in Selenium are: .frame(“<Name or ID or Index or WebElement>”), .findElement(“<All type of locator e.g. id , xpath , cssClass>”), Implicit wait is an example of overloading. In Implicit wait we use different time stamps such as SECONDS, MINUTES, HOURS etc., WebDriverWait methods, Action class in TestNG is also an example of overloading, Assert class in TestNG is also an example of overloading. 
b.	Overridden Methods in Selenium are: WebDriver driver = new FirefoxDriver(); [Example of Interface in framework also], get and navigate methods of different drivers
4)	Abstraction [In Page Object Model design pattern, we write locators (such as id, name, xpath etc.,) and the methods in a Page Class. We utilize these locators in tests but we can’t see the implementation of the locators. Literally we hide the implementations of the locators from the tests.]
•	High Performance: JIT (Just In Time compiler) enables high performance in Java. JIT converts the bytecode into machine language and then JVM starts the execution.
•	Multi-threaded: A flow of execution is known as a Thread. JVM creates a thread which is called the main thread. The user can create multiple threads by extending the thread class or by implementing the Runnable interface.
•	Platform independent: A single program works on different platforms without any modification.

Q #3) How does Java enable high performance?
Answer: Java uses Just In Time compiler to enable high performance. It is used to convert the instructions into bytecodes.
Q #4) Name the Java IDE’s?
Answer: Eclipse and NetBeans are the IDE’s of JAVA.
Q #5) What do you mean by Constructor?
Answer: Constructor can be explained in detail with enlisted points:
•	When a new object is created in a program a constructor gets invoked corresponding to the class.
•	The constructor is a method which has the same name as the class name.
•	If a user doesn’t create a constructor implicitly a default constructor will be created.
•	The constructor can be overloaded.
•	If the user created a constructor with a parameter, then he should create another constructor explicitly without a parameter.
Q #6) What is meant by the Local variable and the Instance variable?
Answer:
Local variables are defined in the method and scope of the variables that exist inside the method itself.
Instance variable is defined inside the class and outside the method and the scope of the variables exists throughout the class.
Q #7) What is a Class?
Answer: All Java codes are defined in a Class. It has variables and methods.
Variables are attributes which define the state of a class.
Methods are the place where the exact business logic has to be done. It contains a set of statements (or) instructions to satisfy the particular requirement.
Example:
public class Addition{ //Class name declaration
int a = 5; //Variable declaration
int b= 5;
public void add(){ //Method declaration
int c = a+b;
}
}
Q #8) What is an Object?
Answer: An instance of a class is called an object. The object has state and behavior.
Whenever the JVM reads the “new()” keyword then it will create an instance of that class.
Example:
public class Addition{
public static void main(String[] args){
Addion add = new Addition();//Object creation
}
}
The above code creates the object for the Addition class.

Q #10) What is Inheritance?
Answer: Inheritance means one class can extend to another class. So that the codes can be reused from one class to another class. The existing class is known as the Super class whereas the derived class is known as a sub class.
Example:
Super class:
public class Manupulation(){
}
Sub class:
public class Addition extends Manipulation(){
}
Inheritance is only applicable to the public and protected members only. Private members can’t be inherited.

Q #11) What is Encapsulation?
Answer: Purpose of Encapsulation:
•	Protects the code from others.
•	Code maintainability.
Example:
We are declaring ‘a’ as an integer variable and it should not be negative.
public class Addition(){
int a=5;
}
If someone changes the exact variable as “a = -5” then it is bad.
In order to overcome the problem we need to follow the steps below:
•	We can make the variable private or protected.
•	Use public accessor methods such as set<property> and get<property>.
So that the above code can be modified as:
public class Addition(){
private int a = 5; //Here the variable is marked as private
}
The code below shows the getter and setter.
Conditions can be provided while setting the variable.
get A(){
}
set A(int a){
if(a>0){
.........
}
}
For encapsulation, we need to make all the instance variables private and create setter and getter for those variables. Which in turn will force others to call the setters rather than access the data directly.

Q #12) What is Polymorphism?
Answer: Polymorphism means many forms. A single object can refer to the super-class or sub-class depending on the reference type, this is called polymorphism.
Example:
Public class Manipulation(){ //Super class
public void add(){
}
}
public class Addition extends Manipulation(){ // Sub class
public void add(){
}
public static void main(String args[]){
Manipulation addition = new Addition();//Manipulation is reference type and Addition is reference type
addition.add();
}
}
Using the Manipulation reference type we can call the Addition class “add()” method. This ability is known as Polymorphism. 

Q #13) What is meant by Method Overriding?
Answer: Method overriding happens if the sub-class method satisfies the below conditions with the Super-class method:
•	Method name should be the same
•	The argument should be the same
•	Return type should also be the same
The key benefit of overriding is that the Sub-class can provide some specific information about that sub-class type than the super-class.
Example:
public class Manipulation{ //Super class
public void add(){
………………
}
}
 
Public class Addition extends Manipulation(){
Public void add(){
………..
}
Public static void main(String args[]){
Manipulation addition = new Addition(); //Polymorphism is applied
addition.add(); // It calls the Sub class add() method
}
}
addition.add() method calls the add() method in the Sub-class and not the parent class. So it overrides the Super-class method and is known as Method Overriding. Method overriding is also called dynamic or runtime polymorphism.

Q #14) What is meant by Overloading?
Answer: Method overloading is also called static or compile time polymorphism. Method overloading happens for different classes or within the same class. For method overloading, sub-class method should satisfy the below conditions with the Super-class method (or) methods in the same class itself:
•	Same method name
•	Different argument types
•	There may be different return types
Example:
public class Manipulation{ //Super class
public void add(String name){ //String parameter
………………
}
}
 
Public class Addition extends Manipulation(){
Public void add(){//No Parameter
………..
}
Public void add(int a){ //integer parameter
 
}
Public static void main(String args[]){
Addition addition = new Addition();
addition.add();
}
}
Here the add() method has different parameters in the Addition class is overloaded in the same class as with the super-class.

Q #15) What is meant by Interface?
Answer: Multiple inheritances cannot be achieved in java. To overcome this problem the Interface concept is introduced.
An interface is a template which has only method declarations and not the method implementation.
Example:
Public abstract interface IManipulation{ //Interface declaration
Public abstract void add();//method declaration
public abstract void subtract();
}
•	All the variables in the interface are internally public static final that is constants.
•	All the methods in the interface are internally public abstract void.
•	Classes can implement the interface and not extends.
•	The class which implements the interface should provide an implementation for all the methods declared in the interface.
public class Manipulation implements IManupulation{ //Manipulation class uses the interface
Public void add(){
……………
}
Public void subtract(){
…………….
}
}
Q #16) What is meant by Abstract class?
Answer: We can create the Abstract class by using the “Abstract” keyword before the class name. An abstract class can have both “Abstract” methods and “Non-abstract” methods.
Abstract method: The method which has only the declaration and not the implementation is called the abstract method and it has the keyword called “abstract”. Declarations ends with a semicolon.
Example:
public abstract class Manipulation{
public abstract void add();//Abstract method declaration
Public void subtract(){
}
}
•	An abstract class may have a non- abstract method also.
•	The concrete Subclass which extends the Abstract class should provide the implementation for abstract methods.
Q #17) Difference between Array and Array List.
Answer: The Difference between Array and Array List can be understood from the table below:
                        Array                                      	   Array List    
Size should be given at the time of array declaration. String[] name = new String[2]	Size may not be required. It changes the size dynamically. ArrayList name = new ArrayList
To add an object into array we need to specify the index. E.g. - name[1] = “book”	No index required. name.add(“book”)
Array is not type parameterized	ArrayList in java 5.0 are parameterized. This angle bracket is a type parameter which means a list of String.

Q #18) Difference between String, String Builder, and String Buffer.
Answer:
String: String variables are stored in a “constant string pool”. Once the string reference changes the old value that exists in the “constant string pool”, cannot be erased.
Example:
String name = “book”;
Constant string pool
 
If the name-value has changed from “book” to “pen”. Then the older value remains in the constant string pool.
Constant string pool
 

String Buffer: Here string values are stored in a stack. If the values are changed then the new value replaces the older value. The string buffer is synchronized which is thread safe. Performance is slower than the String Builder.
Example:
String Buffer name =” book”;
 
Once the name value has been changed to “pen” then the “book” is erased in the stack.
 

String Builder: This is the same as String Buffer except for the String Builder which is not threaded safely that is not synchronized. So obviously the performance is fast.

Q #19) Explain about Public and default access specifiers.
Answer: Methods and instance variables are known as members.
Public: Public members are visible in the same package as well as the outside package that is for other packages. Public members of Class A are visible to Class B (same package) as well as Class C (different packages).
 

Default: Methods and variables declared in a class without any access specifiers are called default. Default members in Class A are visible to the other classes which are inside the package and invisible to the classes which are outside the package. So, Class A members are visible to Class B and invisible to Class C.

 

Q #20) Difference between Protected & Private access specifiers.
Answer:
Protected: Protected is the same as Default but if a class extends then it is visible even if it is outside the package. Class A members are visible to Class B because it is inside the package. For Class C it is invisible but if Class C extends Class A then the members are visible to Class C even if it is outside the package.

              .

Private: Private members are visible in the same class only and not for the other classes in the same package as well as classes in the outside packages. Private members in class A are visible only in that class. It is invisible for class B as well as class C.

 

Q #21) Difference between HashMap and HashTable.
Answer: The difference between HashMap and HashTable can be seen below:
HashMap	HashTable
Methods are not synchronized	Key methods are synchronized
Not thread safety	Thread safety
Iterator is used to iterate the values	Enumerator is used to iterate the values
Allows one null key and multiple null values	Doesn’t allow anything that is null
Performance is high than HashTable	Performance is slow

Q #22) Difference between HashSet and TreeSet.
Answer: The difference between HashSet and TreeSet can be seen below:
HashSet	TreeSet
Inserted elements are in random order	Maintains the elements in the sorted order
Can store null objects	Couldn’t store null objects
Performance is fast	Performance is slow

Q #23) Difference between Abstract class and Interface.
Answer:
Abstract Class:
•	Abstract classes have a default constructor, and it is called whenever the concrete subclass is instantiated.
•	It contains Abstract methods as well as Non-Abstract methods.
•	The class which extends the Abstract class shouldn’t require the implementation of all the methods, only Abstract methods need to be implemented in the concrete sub-class.
•	Abstract class contains instance variables.
Interface:
•	It doesn’t have any constructor and can’t be instantiated.
•	The abstract method alone should be declared.
•	Classes that implement the interface should provide the implementation for all the methods.
•	The interface contains only constants.

Q #24) What is the meaning of Collections in Java?
Answer: Collection is a framework that is designed to store the objects and manipulate the design to store the objects.
Collections are used to perform the following operations:
•	Searching
•	Sorting
•	Manipulation
•	Insertion
•	Deletion
A group of objects is known as collections. All the classes and interfaces for collections are available in Java util package.

Q #25) What are all the Classes and Interfaces that are available in the collections?
Answer: Given below are the Classes and Interfaces that are available in Collections:
Interfaces: Below collections interfaces are available.
•	Collection
•	List
•	Set
•	Map
•	Sorted Set
•	Sorted Map
•	Queue

Classes: Below collections classes are available.
Lists: They are ordered
•	Array List – Ordered, Unsorted, duplicates allowed
•	Vector - methods are synchronized
•	Linked List
Sets:
•	Hash Set – Unordered, Unsorted, duplicates not allowed
•	Linked Hash Set – Ordered
•	Tree Set – Sorted
Maps:
•	Hash Map - Unordered, Unsorted
•	Linked Hash Map - Ordered
•	Hash Table Map - Methods are synchronized
•	Tree Map – Sorted
Queue:
•	Priority Queue

Q #26) What is meant by Ordered and Sorted in collections?
Answer:
Ordered: It means the values are stored in a collection in the order they are added to the collection.
Sorted: Sorting mechanisms can be applied internally or externally so that the group of objects sorted in a particular collection is based on the properties of the objects.

Q #27) Explain the different lists available in the collection.
Answer: Values added to the list are based on the index position and it is ordered by index position. Duplicates are allowed. The types of Lists are:
a) Array List:
•	Fast iteration and fast Random Access.
•	It is an ordered collection (by index) and not sorted.
•	It implements the Random Access Interface.
Example:
public class Fruits{
public static void main (String[] args){
ArrayList <String>names=new ArrayList <String>();
names.add (“apple”);
names.add (“cherry”);
names.add (“kiwi”);
names.add (“banana”);
names.add (“cherry”);
System.out.println (names);
}
}
Output: [Apple, cherry, kiwi, banana, cherry]

b) Vector: 
•	It is the same as Array List. Vector methods are synchronized and thread safe. Thread safety usually causes a performance hit.
•	It also implements Random Access.
Example:
public class Fruit {
public static void main (String[] args){
Vector <String> names = new Vector <String>();
names.add (“cherry”);
names.add (“apple”);
names.add (“banana”);
names.add (“kiwi”);
names.add (“apple”);
System.out.println (“names”);
}
}
Output: [cherry,apple,banana,kiwi,apple]

c) Linked List:
•	Elements are doubly linked to one another.
•	Performance is slower than the Array list.
•	Good choice for insertion and deletion.
•	In Java 5.0 it supports common queue methods peek(), Pool(), Offer() etc.
Example:
public class Fruit {
public static void main (String[] args){
Linkedlist <String> names = new linkedlist <String> () ;
names.add(“banana”);
names.add(“cherry”);
names.add(“apple”);
names.add(“kiwi”);
names.add(“banana”);
System.out.println (names);
}
}
Output: [banana,cherry,apple,kiwi,banana]

Q #28) Explain about Set and their types in a collection.
Answer: Set cares about uniqueness. It doesn’t allow duplications. Here “equals()” method is used to determine whether two objects are identical or not.
a) Hash Set:
•	Unordered and unsorted.
•	Uses the hash code of the object to insert the values.
•	Use this when the requirement is “no duplicates and don’t care about the order”.
Example:
public class Fruit {
public static void main (String[] args){
HashSet<String> names = new HashSet<String>();
names.add(“banana”);
names.add(“cherry”);
names.add(“apple”);
names.add(“kiwi”);
names.add(“banana”);
System.out.println (names);
}
}
Output: [banana, cherry, kiwi, apple]
b) Linked Hash set:
•	An ordered version of the hash set is known as Linked Hash Set.
•	Maintains a doubly-Linked list of all the elements.
•	Use this when an iteration order is required.
Example:
public class Fruit {
public static void main (String[] args){
LinkedHashSet<String>; names = new LinkedHashSet <String>() ;
 names.add(“banana”);
 names.add(“cherry”);
 names.add(“apple”);
 names.add(“kiwi”);
 names.add(“banana”);
 System.out.println (names);
 }
}
Output: [banana, cherry, apple, kiwi]

c) Tree Set:
•	It is one of the two sorted collections.
•	Uses the “Read-Black” tree structure and guarantees that the elements will be in ascending order.
•	We can construct a tree set with the constructor by using a comparable (or) comparator.
Example:
public class Fruits{
public static void main (String[]args) {
Treeset<String> names= new TreeSet<String>() ;
names.add(“cherry”);
names.add(“banana”);
names.add(“apple”);
names.add(“kiwi”);
names.add(“cherry”);
System.out.println(names);
}
}
Output: [apple, banana, cherry, kiwi]

Q #29) Explain about Map and its types.
Answer: Map cares about the unique identifier. We can map a unique key to a specific value. It is a key/value pair. We can search a value, based on the key. Like the set, the map also uses the “equals()” method to determine whether two keys are the same or different. Map is of following types:
a) Hash Map:
•	Unordered and unsorted map.
•	Duplicate keys are not allowed in Map.
•	It allows one null key and multiple null values.

Example:
Public class Fruit{
Public static void main(String[ ] args){
HashMap<Sting, String> names =new HashMap<String, String>();
names.put(“key1”, “cherry”);
names.put (“key2”, “banana”);
names.put (“key3”, “apple”);
names.put (“key4”, “kiwi”);
names.put (“key1”, “cherry”);
System.out.println(names);
}
 }
Output: {key2 =banana, key1=cherry, key4 =kiwi, key3= apple}

b) Hash Table Map:
•	Like Vector, methods of the class are synchronized.
•	Thread safety and therefore slows the performance.
•	It doesn’t allow anything that is null. 
•	Duplicate keys are not allowed.

Example:
public class Fruit{
public static void main(String[ ]args){
Hashtable<Sting,String> names =new Hashtable<String,String>( );
names.put(“key1”, “cherry”);
names.put(“key2”, “apple”);
names.put(“key3”, “banana”);
names.put(“key4”, “kiwi”);
names.put(“key2”, “orange”);
System.out.println(names);
}
 }
Output: {key2=apple, key1=cherry, key4=kiwi, key3=banana}

c) Linked Hash Map:
•	Maintains insertion order.
•	Slower than Hash map. 
•	Can expect a faster iteration.
•	Duplicate keys are not allowed.

Example:
public class Fruit{
public static void main(String[ ] args){
LinkedHashMap<Sting,String> names =new LinkedHashMap<String,String>( );
 names.put(“key1”,“cherry”);
 names.put(“key2”,“apple”);
 names.put(“key3”,“banana”);
 names.put(“key4”,“kiwi”);
 names.put(“key2”,“orange”);
 System.out.println(names);
 }
 }
Output: {key2=apple, key1=cherry, key4=kiwi, key3=banana}

d) Tree Map:
•	Like Tree set, we can construct a sort order with the constructor.
•	It is sorted in ascending order based on the key. 
•	Duplicate keys are not allowed.
Example:
public class Fruit{
public static void main(String[ ]args){
TreeMap<Sting,String> names =new TreeMap<String, String>( );
names.put(“key1”,“cherry”);
names.put(“key2”,“banana”);
names.put(“key3”,“apple”);
names.put(“key4”,“kiwi”);
names.put(“key2”,“orange”);
System.out.println(names);
}
}
Output: {key1=cherry, key2=banana, key3 =apple, key4=kiwi}

Q #30) Explain the Priority Queue / Queue Interface.
Answer: Linked list class has been enhanced to implement the queue interface. Queues can be handled with a linked list. The purpose of a queue is “Priority-in, Priority-out”. Hence elements are ordered either naturally or according to the comparator. The elements ordering represents their relative priority.

Q #31) What is meant by Exception?
Answer: An Exception is a problem that can occur during the normal flow of execution. A method can throw an exception when something fails at runtime. If that exception couldn’t be handled, then the execution gets terminated before it completes the task. If we handled the exception, then the normal flow gets continued. Exceptions are a subclass of java.lang.Exception.

Example for handling Exception:
try{
//Risky codes are surrounded by this block
}catch(Exception e){
//Exceptions are caught in catch block
}
Q #32) What are the types of Exceptions?
Answer: There are two types of Exceptions. They are explained below in detail.
a) Checked Exception: These exceptions are checked by the compiler at the time of compilation. Checked Exceptions must either declare the exception using throws keyword (or) surrounded by appropriate try/catch. For Example – ClassNotFound Exception

b) Unchecked Exception: These exceptions are not checked during the compile time by the compiler.  The compiler doesn’t force to handle these exceptions. For Example - ArithmeticException, ArrayIndexOutOfBounds Exception

Q #33) What are the different ways to handle exceptions?
Answer:
a) Using try/catch: The risky code is surrounded by try block. If an exception occurs, then it is caught by the catch block which is followed by the try block.
Example:
class Manipulation{
public static void main(String[] args){
add();
}
Public void add(){
try{
addition();
}catch(Exception e){
e.printStacktrace();
}
}
}
b) By declaring throws keyword: At the end of the method, we can declare the exception using throws keyword.
Example:
class Manipulation{
public static void main(String[] args){
add();
}
public void add() throws Exception{
addition();
}
}
Q #34) What are the advantages of Exception handling?
Answer: The advantages are as follows:
•	The normal flow of program execution won’t be terminated
•	We can identify the problem by using catch declaration
 
Q #35) What are the Exception handling keywords in Java?
Answer: Enlisted below are the two Exception Handling Keywords:
a) try: When a risky code is surrounded by a try block. An exception occurring in the try block is caught by a catch block. Try can be followed either by catch (or) finally (or) both. But any one of the blocks is mandatory.
b) catch: This is followed by a try block. Exceptions are caught here.
c) finally: This is followed either by try block (or) catch block. This block gets executed regardless of an exception. So generally, clean up codes are provided here.

Q #36) Explain about Exception Propagation.
Answer: Exception is first thrown from the method which is at the top of the stack. If it’s not caught, then the method is popped up and the control moves to the previous method and so on until they are caught. This is called Exception propagation.

Example:
public class Manipulation{
public static void main(String[] args){
add();
}
public void add(){
addition();
}
From the above example, the stack looks like as shown below:
  
If an exception occurs in the addition() method is not caught, then it moves to the method add(). Then it is moved to the main() method and then it will stop the flow of execution. It is called Exception Propagation.

Q #37) What is the final keyword in Java?
Answer:
Final variable: Once a variable is declared as final, then the value of the variable could not be changed. It is like a constant. For Example: final int = 12;
Final method: A final keyword in a method, couldn’t be overridden. If a method is marked as a final, then it can’t be overridden by the subclass.
Final class: If a class is declared as final, then the class couldn’t be subclassed. No class can extend the final class.

Q #38) What is a Thread?
Answer: In Java, the flow of execution is called Thread. Every java program has at least one thread called the main thread, the main thread is created by JVM. The user can define their own threads by extending the Thread class or by implementing the Runnable interface. Threads are executed concurrently.
Example:
public static void main(String[] args){//main thread starts here
}

Q #39) How do you make a thread in Java?
Answer: There are two ways available to make a thread.
a) Extend Thread class: Extending a Thread class and override the run method. The thread is available in java.lang.thread.
Example:
Public class Addition extends Thread {
public void run () {
}
}
The disadvantage of using a thread class is that we cannot extend any other classes because we have already extended the thread class. We can overload the run() method in our class.

b) Implement Runnable interface: Another way is by implementing the runnable interface. For that, we should provide the implementation for the run() method defined in the interface.

Example:
Public class Addition implements Runnable {
public void run () {
}
}
Q #40) Explain about join () method.
Answer: join() method is used to join one thread with the end of the currently running thread.
Example:
public static void main (String[] args){//Main thread gets created by JVM
Thread t = new Thread();
t.start();//Creates a new thread and the code inside the run() method is executed
t.join();//New thread executes and completes its task, then only main thread starts execution
}
Based on the above code, the main thread has started the execution. When it reaches the code t.start() then ‘thread t’ starts the own stack for the execution. JVM switches between the main thread and ‘thread t’.
Once it reaches the code t.join() then ‘thread t’ alone is executed and completes its task, then only the main thread starts the execution.
It is a non-static method. The join() method has an overloaded version. So we can mention the time duration in join() method also.

Q #46) Difference between start() and run() method of thread class.
Answer: Start() method creates a new thread and the code inside the run() method is executed in the new thread. If we directly called the run() method then a new thread is not created and the currently executing thread will continue to execute the run() method.

Q #41) What does the yield method of the Thread class do?
Answer: A yield() method moves the currently running thread back to runnable state only, and not the thread to sleep (), wait () (or) block and allows the other threads for execution. So that equal priority threads have a chance to run. It is a static method. It doesn’t release any lock.
Example:
public static void main (String[] args){
Thread t = new Thread();
t.start();
}
public void run(){
Thread.yield(); //moves the currently running thread to a runnable state
}
}
Q #42) Explain about wait () method.
Answer: wait () method is used to make the thread to wait in the waiting pool. When the wait () method is executed during a thread execution then immediately the thread gives up the lock on the object and goes to the waiting pool. wait() method tells the thread to wait for a given amount of time.
Then the thread will wake up after notify () (or) notify all () method is called. wait() and the other above-mentioned methods do not give the lock on the object immediately until the currently executing thread completes the synchronized code. It is mostly used in synchronization.
Example:
public static void main (String[] args){
Thread t = new Thread();
t.start();
Synchronized(t) {
wait();
}
}
Q #43) Difference between notify() method and notifyAll() method in Java.
Answer: The differences between notify() method and notifyAll() method are enlisted below:
notify()	notifyAll()
This method is used to send a signal to wake up a single thread in the waiting pool.	This method sends the signal to wake up all the threads in a waiting spool.

Q #44) How to stop a thread in java? Explain about sleep () method in a thread?
Answer: We can stop a thread by using the following thread methods:
•	Sleep
•	Wait
•	Blocked
Sleep: Sleep() method is used to sleep the currently executing thread for the given amount of time. Once the thread wakes up it moves to the runnable state. So sleep () method is used to delay the execution for some period.
It is a static method.
Example:
Thread. Sleep (2000)
So it delays the thread to sleep 2 seconds. Sleep() method throws an Interrupted exception; hence we need to surround the block with try/catch.

public class ExampleThread implements Runnable{
public static void main (String[] args){
Thread t = new Thread(new ExampleThread());
t.start();
}
public void run(){
try{
Thread.sleep(2000);
}catch(InterruptedException e){
}
}
Q #45) When to use the Runnable interface Vs Thread class in Java?
Answer: If we need our class to extend some other classes other than the thread then we can go with the runnable interface because in java we can extend only one class. If we are not going to extend any class then we can extend the thread class.
// Java code for thread creation by extending the Thread class
class MultithreadingDemo extends Thread {
	public void run()
	{
		try {
			// Displaying the thread that is running
			System.out.println("Thread " + Thread.currentThread().getId()+ " is running");
		}
		catch (Exception e) {
			// Throwing an exception
			System.out.println("Exception is caught");
		}
	}
}

// Main Class
public class Multithread {
	public static void main(String[] args)
	{
		int n = 8; // Number of threads
		for (int i = 0; i < n; i++) {
			MultithreadingDemo object = new MultithreadingDemo();
			object.start();
		}
	}
}

// Java code for thread creation by implementing the Runnable Interface
class MultithreadingDemo implements Runnable {
	public void run()
	{
		try {
			// Displaying the thread that is running
			System.out.println(	"Thread " + Thread.currentThread().getId() + " is running");
		}
		catch (Exception e) {
			// Throwing an exception
			System.out.println("Exception is caught");
		}
	}
}

// Main Class
class Multithread {
	public static void main(String[] args)
	{
		int n = 8; // Number of threads
		for (int i = 0; i < n; i++) {
			Thread object = new Thread(new MultithreadingDemo());
			object.start();
		}
	}
}

Q #47) What is Multi-threading?
Answer: Multiple threads are executed simultaneously. Each thread starts its own stack based on the flow / priority of the threads.
Example Program:
public class MultipleThreads implements Runnable
{
public static void main(String[] args){//Main thread starts here
MultipleThreads r = new MultipleThreads();
Thread t = new Thread(r);
t.start(); //User thread starts the execution of run() method
Addition add=new addition();
}
public void run(){ //User thread starts execution
go();

synchronized(object){
 {
  }//User thread ends here
}

On the 1st line execution, JVM calls the main method and the main thread stack looks as shown below.
 
Once the execution reaches, t.start() line then a new thread is created and the new stack for the thread is also created. Now JVM switches to the new thread and the main thread are back to the runnable state.
The two stacks look as shown below.
 
Now, the user thread executed the code inside the run() method.
 
Once the run() method has completed, then JVM switches back to the main thread and the user thread has completed the task and the stack was disappeared.
JVM switches between each thread until both the threads are completed. This is called Multi-threading.

Q #48) Explain the thread life cycle in Java.
Answer: Thread has the following states:
•	New
•	Runnable
•	Running
•	Non-runnable (Blocked)
•	Terminated
 
•	New: In New state, a Thread instance has been created but start() method is not yet invoked. Now the thread is not considered alive.
•	Runnable: The Thread is in the runnable state after the invocation of the start() method, but before the run() method is invoked. But a thread can also return to the runnable state from waiting/sleeping. In this state, the thread is considered alive.
•	Running: The thread is in a running state after it calls the run() method. Now the thread begins the execution.
•	Non-Runnable(Blocked): The thread is alive but it is not eligible to run. It is not in the runnable state but also, it will return to the runnable state after some time.  Example: wait, sleep, block.
•	Terminated: Once the run method is completed then it is terminated. Now the thread is not alive.

Q #49) What is Synchronization?
Answer: Synchronization allows only one thread to access a sensitive block of code at a time. If multiple threads access the sensitive block of code, then there is a chance for inaccurate results at the end. To avoid this issue, we can provide synchronization for the sensitive block of codes.
The synchronized keyword means that a thread needs a key in order to access the synchronized code. Every Java object has a lock and a lock has only one key. A thread can access a synchronized method only if the thread can get the key to the objects to unlock. For this, we use the “Synchronized” keyword.

Example:
public class ExampleThread implements Runnable{
 public static void main (String[] args){
 Thread t = new Thread();
 t.start();
 } 
 public void run(){
 synchronized(object){
 }
}
}
Q #50) What is the disadvantage of Synchronization?
Ans: Synchronization is not recommended to implement for all the methods. Because if one thread accesses the synchronized code then the next threads have to wait. So it makes a slow performance.

Q #54) What is the purpose of a Volatile Variable?
Answer: Volatile variable values are always read from the main memory and not from thread’s cache memory. This is used mainly during synchronization. It is applicable only for variables. Example: volatile int number;

Q #51) What is meant by Serialization?
Answer: Converting a file into a byte stream is known as Serialization. The objects in the file are converted to bytes for security purposes. For this, we need to implement a java.io.Serializable interface. It has no method to define.
Variables that are marked as transient will not be a part of the serialization. So we can skip the serialization for the variables in the file by using a transient keyword.

Serialization: Process of writing java object into a file is called Serialization. It is the process of converting an object from java supported form to file supported or network supported form. Using FileOutputStream and ObjectOutputStream we can achieve Serialization. 

Code for Serializing the object and write the serialized object to a file:
FileOutputStream fos = new FileOutputStream(file);
ObjectOutputStream oos = new ObjectOutputStream(fos);
oos.writeObject(list);
fos.close();
oos.close();

Deserialization: The process of reading java objects from file is called Deserialization. It is the process of converting an object from file or network supported form to java supported form. Using FileInputStream and ObjectInputStream we can achieve DeSerialization. 

Code for Reading the file and deserializing the object:
FileInputStream fis = new FileInputStream(file);
ObjectInputStream ois = new ObjectInputStream(fis);
User user = (User) ois.readObject();

Q #52) What is the purpose of a transient variable?
Answer: Transient variables are not part of the serialization process. During deserialization, the values of the transient variables are set to the default value. It is not used with static variables. Example: transient int numbers;

Q #53) Which methods are used during the Serialization and Deserialization process?
Answer: ObjectOutputStream and ObjectInputStream classes are higher level java.io packages. We will use them with lower-level classes FileOutputStream and FileInputStream.

To be serialized, an object must implement the serializable interface. If superclass implements Serializable, then the subclass will automatically be serializable.

Q #55) Difference between Serialization and Deserialization in Java.
Answer:
Serialization	Deserialization
Serialization is the process used to convert the objects into byte stream.	Deserialization is the opposite process of serialization where we can get the objects back from the byte stream.
An object is serialized by writing it on ObjectOutputStream.	An object is deserialized by reading it from an ObjectInputStream.
ObjectOutputStream.writeObject —Serialize the object and write the serialized object to a file.	ObjectInputStream.readObject –
 Reads the file and deserializes the object.

Q #56) What is SerialVersionUID?
Answer: Whenever an object is Serialized, the object is stamped with a version ID number for the object class. This ID is called the SerialVersionUID. This is used during deserialization to verify that the sender and receiver are compatible with the Serialization.

Java File Operation Methods:
Operation		Method		Package		Example					
To create file		f.createNewFile()		java.io.File		File f = new File("filename.txt");
To read file		r.read()			java.io.FileReader	FileReader r = new FileReader("filename.txt");
To write file		w.write()		java.io.FileWriter		FileWriter w = new FileWriter("filename.txt");
To delete file		f.delete()		java.io.File		f.delete();


 
Squish Interview Questions
Question 1. Can We Perform Verifications During Runtime?
Yes, your tests can perform execution verifications during script playback, we call them verification points.
Question 2. Can We Pass Data Through External Files Such As Excel?
Yes, Excel, csv, tsv, etc. as well as database connections.
How to Access Databases from Squish Test Scripts.
Question 3. When I Start Recording, The Control Bar Does Not Appear. What Can I Do?
Anytime an issue occurs, the first thing you should check is the Runner/Server Log View. This area can reveal the reason something may not be working as expected.
Question 4. How Extensible is Squish to Handle Objects in Terminal Emulation?
This response assumes the question refers to a text-based terminal interface. While Squish focuses on testing GUIs, it can still work with such interfaces when paired with dedicated tools such as Expect and one of Squish scripting languages.
Question 5. What Type Of Test Are Supported By Squish?
Squish is a cross platform (Windows, Linux, Mac, Android, iOS etc.) and multi technology (Windows, Java, Qt, Tk, Web etc.) GUI automation testing tool which supports different languages – JavaScript, Python, Perl, Ruby, TCL.
Question 6. Where Are The Global Scripts Located?
Anywhere accessible to your machine so that you can simply browse and tell squish to include them in the Global Scripts list.
Question 7. Can We Have Multiple Scripts In Test Suite Resources?
Yes. Test Suite Resources can have multiple scripts, test data and verification points resources.
Question 8. Can We Test Qt And Windows Apps Using Same Test Suite?
Yes. You simply need a combination Squish Qt & Windows package
Question 9. Do U Have All Combination Editions? Or Is It Only Controlled By Licensing?
We have all combinations of editions. Performed only upon request. A combination package of more than one technology also requires a combination license for each technology.
Question 10. What Accordingly To You Is The Major Difference Between Squish And Other Competitor Tools In The Market Today?
•	Squish is cross-platform. It supports many more platforms than other tools.
•	Squish identifies objects easily and using the object’s real properties, not derived objects or properties such as MSAA or similar. This gives more accurate and more extensive access to the object information, thus creating more reliable object recognition and interaction. Squish provides Qt toolkit support stretching beyond what most other vendors provide, including but not limited to standard and complex controls as well as custom controls derived from Qt controls. You also have the ability to implement support for other custom controls not already supported (or inquire our status on implementing such controls).
•	Squish supports multiple non-proprietary scripting languages. This allows you to use external, squish-independent scripts in the same scripting language within your test suites.
•	Squish also provides access to each toolkit’s API, for example, we are looking at a Qt application, so you have access to the entire Qt toolkit API, all slots including Q_PROPERTYs and beyond. You also have the Apps Qt signal script function connectivity. 
•	Our integrations with other tools is extensive, as well as our command-line interface
•	We share our source code with customers.
•	The level of toolkit support, scripting language power, and versatility and flexibility of the Squish GUI Tester solution is difficult to match.
Question 11. What’s The Difference Between “source” And “import”?
Source tells Squish which other files to use when looking for other shared script files either in the Test Case Resources or Global Script views. All functions within the source call are then available just as standard Squish API and Toolkit-specific API functions are available. Import is used for importing modules from the selected scripting language’s standard libraries.
Question 12. Does Squish Support Excel 2003 Or 2007?
Yes, Squish supports Excel, but only in the .xls (not .xlsx) file format at this time.
Question 13. Will I Get Objects Added to The Object Map Only On Recording Basis, Or Can All The Objects Pertaining To That Application Be Added Manually?
Objects are automatically added to the object map as your record but can be manually added either by using the object picker by selecting an object and then selecting add to object map or by manually creating object map entries. Also remember to check object existence and highlight object features when working with the object map.
Question 14. Is It Possible To Execute Automated Scripts On Devices With Embedded Devices With Qt Gui?
Yes, and many of our customers are testing Qt-embedded application on their devices.
Question 15. Can I Change Properties Of An Object (visible)?
Yes. Using the toolkit API within your script.
Question 16. Is There A Big Difference To Test Qt And Qml Applications?
The only difference is the objects you’re interacting with the underlying toolkit. 
Question 17. What are Verification Points in Squish? 
Object Property Verifications, Screenshot Verifications, Table Verification, Visual Verification
Also refer: - https://doc.froglogic.com/squish/3.2/ug-vps.html#ugv-scripting

Question 18. Few Squish related videos? 
https://www.youtube.com/watch?v=v8UlGjuyOfk
Working with Object Map: - https://www.youtube.com/watch?v=BvthF5IuW74
https://www.youtube.com/watch?v=PRvulU8Q7EY
QT and BDD: - https://www.youtube.com/watch?v=1IkmhpLACvc
	New Features: - https://www.youtube.com/watch?v=0J340ehv_YI
	More: - https://www.youtube.com/watch?v=SIlrYaVMJcA

	Question 19. How to run tests from command line?
	From batch file. For this squishserver has to be up and running.

	Question 20: New features of Squish 6.6?
1.	Can add tag to the test case
2.	Test center where our test results can be saved for future reference
3.	Can select python version at Squish setup wizard level
4.	Web assembly – currently possible for Firefox and Chrome only
5.	Remote control feature of multiple environments
Edit Preferences Uncheck ‘Start local Squish server automatically’.  Then start the recording and click on Remote control
6.	Support for Windows Forms and WPF app on .NET core
7.	Enhancements for Android Application Accessibility Objects on Android
Flutter & QtQuick objects

 
Selenium Interview Questions
1. Window pop up handle through Desired Capabilities
ChromeOptions options = new ChromeOptions();//InternetExplorerOptions options = new InternetExplorerOptions() //Way1
options.addArgument("--disable-infobars");//Prevents displaying ‘Chrome is being controlled by automated software’
WebDriver driver = new ChromeDriver(options);

ChromeOptions options = new ChromeOptions();			//Way2: AdBlocker extension
options.addExtensions(new File("Path to CRX File corresponding to AdBlocker extension")); 
DesiredCapabilities capabilities = DesiredCapabilities.chrome();
capabilities.setCapability(ChromeOptions.CAPABILITY, options); 	//*
WebDriver driver = new ChromeDriver(capabilities);

options.merge(capabilities); //*From Selenium 3.8.1, driver capabilities class is deprecated, so we need to merge capabilities object with ChromeOptions object before passing the same as an argument to ChromeDriver constructor
WebDriver driver = new ChromeDriver(options);

//Follow the same (i.e. merge options.merge(capabilities) for ("--incognito"); & ("--headless");

#options = webdriver.ChromeOptions() 		#This is also good--> options =Options()
options.add_argument('--disable-notifications')
options.add_argument("--disable-web-security")
options.add_argument('--headless') 	# chromeoptions.headless = True
options.add_argument('-- incognito')
options.add_argument("--disable-xss-auditor")
options.add_argument("--no-sandbox")
options.add_argument("--disable-setuid-sandbox")
options.add_argument("--disable-webgl")
options.AddArgument("--disable-cache");
options.AddArgument("--disable-cookies");
options.AddArgument("--disable-extensions");
options.AddArgument("--disable-plugins");
options.AddArgument("--start-maximized");

 
options.add_argument('--allow-running-insecure-content')
options.add_argument('--ignore-certificate-errors')
53: What is desired capabilities?
Desired Capabilities are a set of key-value pairs used to set the values to some of the attributes of browser (like – ACCEPT_SSL_CERTS, PLATFORM_NAME, BROWSER_NAME, VERSION etc.) before we can launch using selenium WebDriver. Below are the commonly used pre-defined capability types.

ACCEPT_SSL_CERTS	This property tells the browser to accept SSL Certificates by default
PLATFORM_NAME	Used to set the operating system platform used to access the web site
BROWSER_NAME	This property is used to set the browser name for a web driver instance
VERSION		This property is used to set the browser version

27. How can we handle Windows-based popups / Windows UI elements with Selenium?
Selenium solely supports web-based application testing. To handle Windows-based popups, third-party intervention is required. Robot, AutoIt, Sikuli are examples of third-party tools that we can use alongside Selenium to handle Windows-based popups.

Window pop up handling through Robot class
Robot robot = new Robot();		//Throws AWTException
robot.keyPress(keyEvent.VK_ENTER);
robot.keyRelease(keyEvent.VK_ENTER);
robot.mousePress(InputEvent.Button1_DOWN_MASK);
robot.mouseRelease(InputEvent.Button1_DOWN_MASK);
robot.mouseMove(Point.getX(), Point.getY());

Right click on a webpage, a pop up menu opens, how will you select an option from the menu==> Robot class

3. Block Windows pop up:
Note: Use Incognito mode in Chrome to avoid any alerts/notifications and Incognito is also secure in some ways.
options.addArgument("--disable-popup-blocking") 						//Way1
options.setExperimentalOption("excludeSwitches", Arrays.asList("disable-popup-blocking"));	 //Way2

4. Block Windows pop up for username/password by disabling the credentials:
Map<String, Object> prefs = new HashMap<String, Object>();
prefs.put("credentials_enable_service", false);
prefs.put("profile.password_manager_enabled", false);
options.setExperimentalOption("prefs", prefs);

5. How to enter value (id/pwd) in pop up in selenium?
a)  The easiest way to handle the HTTP proxy Authentication Pop ups in browser is to enter the credentials in Url Itself. For Example, if credentials are like Username: admin & Password: admin, then
driver.get("https://admin:admin@the-internet.herokuapp.com/basic_auth"); 
b) Simply switch to alert and use authenticateUsing() method to set usename and password and then comeback to parent window
driver.switchTo().alert().authenticateUsing(new UserAndPassword("userName","Password"));
driver.switchTo().defaultContent() ; 
c)driver.switch_to_alert().send_keys(keysToSend="username\ue004password").accept() #\ue004 is the value for TAB

6. Set download directory
Map<String, Object> prefs = new HashMap<String, Object>();
prefs.put("download.default_directory", "/directory/path");
options.setExperimentalOption("prefs", prefs);

Also refer: https://chromedriver.chromium.org/capabilities

Implementation of Automation Framework for API (RestAssured):
1.	Implementation / Development
•	Create Maven Project
•	Update pom.xml
•	Create folder structure 
2.	Execution
3.	Maintenance

Points to Note: 
1.	log4j dependency needs to be added in pom.xml for generating log
  

2.	test-output/index.html is the TESTNG report
3.	test-output/emailable-report.html is another report generated by TESTNG
4.	For creating extent report, we need to perform below –
•	Add extentreports dependency in pom.xml
<groupId>com.aventstack</groupId> 
<artifactId>extentreports</artifactId> 
<version>3.1.5</version>
•	Create TestListener.java utility class

Create ExtentTestManager.java class like below:
package com.vsysq.base;
import java.util.HashMap;
import java.util.Map;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;

public class ExtentTestManager {
	static Map<Integer, ExtentTest> extentTestMap = new HashMap<Integer, ExtentTest>();
	static ExtentReports extent = ExtentManager.getInstance();

	public static synchronized ExtentTest getTest() {
		return (ExtentTest) extentTestMap.get((int) (long) (Thread.currentThread().getId()));
	}
	public static synchronized void endTest() {
		extent.flush();
	}
	public static synchronized ExtentTest startTest(String testName) {
		ExtentTest test = extent.createTest(testName);
		extentTestMap.put((int) (long) (Thread.currentThread().getId()), test);
		return test;
	}
}
Create TestListener.java class by implementing TestNG listener ITestListener interface.
package com.vsysq.base;
import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;
import com.aventstack.extentreports.Status;

public class TestListener implements ITestListener {
	public void onStart(ITestContext context) {
		System.out.println("*** Test Suite " + context.getName() + " started ***");
	}
	public void onFinish(ITestContext context) {
		System.out.println(("*** Test Suite " + context.getName() + " ending ***"));
		ExtentManager.getInstance().flush(); // ExtentTestManager.endTest();

	}
	public void onTestStart(ITestResult result) {
		System.out.println(("*** Running test method " + result.getMethod().getMethodName() + "..."));
		ExtentTestManager.startTest(result.getMethod().getMethodName());
	}
	public void onTestSuccess(ITestResult result) {
		System.out.println("*** Executed " + result.getMethod().getMethodName() + " test successfully...");
		ExtentTestManager.getTest().log(Status.PASS, "Test passed");
	}
	public void onTestFailure(ITestResult result) {
		System.out.println("*** Test execution " + result.getMethod().getMethodName() + " failed...");
		ExtentTestManager.getTest().log(Status.FAIL, "Test Failed");
	}
	public void onTestSkipped(ITestResult result) {
		System.out.println("*** Test " + result.getMethod().getMethodName() + " skipped...");
		ExtentTestManager.getTest().log(Status.SKIP, "Test Skipped");
	}
	public void onTestFailedButWithinSuccessPercentage(ITestResult result) {
		System.out.println("*** Test failed but within percentage % " + result.getMethod().getMethodName());
	}
}
•	Add the path of this TestListener.java class in testing.xml
  

 

5.	WebDriverManager dependency can be added in pom.xml as below
  
•	WebDriverManager.chromedriver().setup();
•	WebDriverManager.chromedriver().driverVersion("85.0.4183.38").setup();
•	WebDriverManager.chromedriver().browserVersion("83.0.4103").setup();
•	WebDriverManager.chromedriver().architecture(io.github.bonigarcia.wdm.Architecture.X32).setup(); // chromedriver().arch32().setup(); //chromedriver().arch64().setup();
•	WebDriverManager.chromedriver()
.driverVersion("83.0.0")
.arch32()
.proxy("proxyhostname:80")
.proxyUser("username")
.proxyPass("password")
.setup();

Ways to execute test cases in framework
1.	Using testing.xml
2.	Using pom.xml – plugins (maven-compiler-plugin, maven-surefire-plugin) required under <builds>/<plugins>
3.	Command prompt – Maven software required to be installed in window OS
a.	Download MAVEN zip folder and extract in C:/
b.	Copy C:/apache-maven/bin and paste / set maven-path in Environment variables
c.	Verify if maven is installed – from cmd, type mvn -version
d.	Go to project in cmd and run pom.xml from there like, mvn clean install 
4.	Run.bat
a.	Create a bat file giving the below two command
b.	Cd /projPath
c.	mvn clean install
5.	Jenkins
a.	MAVEN is a build tool. Using it, we create build and using Jenkins we deploy that build
b.	Inside build tag in Jenkins, Cd /projPath; run.bat

Maintaining Framework (Git is local repo, GitHub is remote repo)
1.	Create an empty repo in GitHub
2.	From top right corner in Eclipse, search for ‘Git Repository’  Clone Git repo in Eclipse
3.	Add the project to local git Right click on project Team  Share Proj Select local repo  Finish
4.	Now push the local repo to remote repo  Right click on local repo in Eclipse OR Right click on project in Eclipse  Team  Add to Index (i.e., staging area)
5.	Right click  Team  Commit  Add some comment  Commit and push  URL and branch  User & Password of GitHub repo login
6.	For taking the pull from GitHub into Eclipse: Right click on project  Team  Pull


 

 
46: How to skip a test method in TestNG?
@Test (enabled = false)

 

 

 

 

39: What are the main advantages of POM (Page Object Model)?
There are two notable advantages - it improves the code’s maintainability and reusability.

 

 
It is inspired from JUnit and NUnit. It introduces some new functionalities that make it more powerful and easier to use.

 

 
 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
44: What’s Junit?
Junit is a Java-based framework designed for unit testing.

 

 

 

 

 

 

 

 
 

 

 

 

 

 

 

 

 

 

 

 
Test execution starts from TestRunner class
 

 

 

 

C# - Namespaces. A namespace is designed for providing a way to keep one set of names separate from another. The class names declared in one namespace does not conflict with the same class names declared in another.
1. Soft Assert vs Hard Assert 
Soft Assert: Soft Assert collects errors during @Test. Soft Assert does not throw an exception when an assert fails and would continue with the next step after the assert statement. 
Hard Assert: Hard Assert throws an AssertException immediately when an assert statement fails and would not continue with the next step after the assert statement rather it continues with next @Test execution.
Example - Hard Assert:
assert ele.text == 'Home'
Example - Soft Assert: 
try:
    assert ele.text == 'Home'
except AssertionError:
    print("Assertion failed. Actual value is %s" % ele.text)
2. Assert vs Verify 
Assert: If the assert condition is true then the program control will execute the next test step but if the condition is false, the execution will stop and further test step will not be executed. When an assert statement fails then all the other test steps after that won't execute. This is a problem, but again its good practice to use try catch block to avoid this situation.
 

 

 
Verify: There won’t be any halt in the test execution whether the verify condition is true or false. Verify is used in less critical things. Cases where we can move forward even if the other test cases fails.
 
The three most used commands in verifying page elements are:
•	verifyElementPresent/ verifyElementNotPresent
•	verifyTextPresent/ verifyTextNotPresent
•	verifyElementPositionLeft/ verifyElementPositionTop

60. How to make sure all the web elements in a page is loaded?
Wait commands are classified into two:
•	andWait commands (clickAndWait, typeAndWait, selectAndWait) - used when a page is expected to be loaded
•	waitFor commands (waitForTitle, waitForTextPresent, waitForAlert) - used when no new page is expected to be loaded
Refer: - https://www.guru99.com/enhancing-selenium-ide-script.html

20. What are the different types of waits available in WebDriver?
There are two types of waits available in WebDriver: Implicit and Explicit (WeDriverWait & FluentWait)
Implicit wait performs ongoing and repetitive searches for an element. It’s written at one place but its applicable for all the findElement commands. It is used for searching web element on the web page.
Explicit wait: These waits are used to halt the execution until a particular condition is met or the maximum time has elapsed. It is used to check the property of WebElement to verify if it is accessible (i.e., visible and enabled). WebDriverWait wait = new WebDriverWait(driver, 10);
Fluent wait: It is a type of wait in which we can also specify polling interval (intervals after which driver will try to find the element) along with the maximum timeout value.
FluentWait<WebDriver> wait = new FluentWait<WebDriver>(driver);
wait.withTimeout(20, TimeUnit.SECONDS);
wait.pollingEvery(1, TimeUnit.SECONDS);

3. selectbyvisibletext, selectByValue, selectByIndex is not there, then how to select value from dropdown?
Ans:- By iterating through the list and selecting the desired option
public class OptionsClick{
   public static void main(String[] args) {
      System.setProperty("webdriver.chrome.driver", "C:\\Users\\ghs6kor\\Desktop\\Java\\chromedriver.exe");
      WebDriver driver = new ChromeDriver();
      String url = "https://www.tutorialspoint.com/tutor_connect/index.php";
      driver.get(url);
      driver.manage().timeouts().implicitlyWait(12, TimeUnit.SECONDS);
      List<WebElement> opt = driver.findElements(By.xpath("//select[@name=’selType’]//option"));
      for( int j = 0; j< opt.size();j++){
         if(opt.get(j).getText().equals("By Subject")){
            opt.get(j).click();
            break;
         }
      }
      driver.quit();
   }
}
5. Is Selenium 2.0 different from Selenium 3.0? If so, how?
Selenium RC is called Selenium 1, and the integration of Selenium RC and WebDriver as a single tool formed Selenium 2. Selenium RC is now deprecated. Selenium RC supports languages like Java, Javascript, C#, Python etc and almost all browsers.
Selenium 3.0 was developed with new features added on top of Selenium 2. Selenium 3.0  supports Selenium 2.0 features but doesn’t have support for Selenium 1.0, i.e. Selenium Core. 
In Selenium 3.0, client library uses JSON wire protocol to interact with the driver whereas driver, browser all follow W3C protocol. So here Selenium has to do encryption/decryption mechanism to interact in order to interact with the driver, so the communication is slow, inconsistent. To overcome this drawback, Selenium 4.0 came.
6. Mention some of the popular tools used for automation testing.
•	Selenium
•	Squish
•	HP Unified Functional Testing (UFT)
•	Rational Robot
•	IBM Rational Functional Tester
8. Why should you use Selenium for test automation or advantages of Selenium?
•	Is a free and open-source tool
•	Has a large user base and community support
•	Has cross-browser compatibility (Firefox, Chrome, Internet Explorer, Safari, etc.)
•	Has great platform compatibility (Windows, Mac OS, Linux, etc.)
•	Supports multiple programming languages (Java, C#, Ruby, Python, Perl, etc.)
•	Using Selenium IDE component, non-programmers can also write automation scripts
•	Using Selenium grid component, distributed testing can be carried out on remote machines
9. Does Selenium have any technical limitations? If so, what are those limitations?
Yes, Selenium has a few limitations:
•	Testing of mobile applications or desktop applications is not possible.
•	A third-party tool like TestNG or JUnit should be used to generate reports.
•	As Selenium is a free tool, there is no ready vendor support through which users can find help
•	Third party calendar / element cannot be handled
•	Bitmap comparison is not possible using WebDriver
•	Captcha automation not possible		[We can disable the captha in Test env.]
•	Barcode automation not possible		[Can be done using external Xing API]
•	Windows based pop up cannot be handled	[Can be done using AutoIT, Sikuli, Robot]
•	Image / Word / PDF cannot be handled
11. What are the different types of annotations used in Selenium? Explain the JUnit annotation linked with Selenium.
In Java, a special form of syntactic metadata can be added to Java source code, which is known as ‘annotations’. Variables, parameters, packages, methods, and classes are annotated. Some of the JUnit annotations are:
JUnit annotations linked with Selenium are:
•	@Test: The @Test annotation finds a method to be a test method. When used before a test method, it is mentioned as ‘@Test’; it informs the JUnit framework that the following method is a test method.
•	@Before: The @Before annotation is used to find the method that is executed before executing the test method. This method can be used to set up the test environment.
•	@After: The @After annotation is a method that is executed after executing the test method. This method can be used to do a teardown, i.e., it is a method used to delete all temporary data, set up default values, clean up the test environment, etc.
•	@BeforeClass: The @BeforeClass method is used only once before the start of all tests. Basically, this is used to perform cumbersome activities, like connecting to a database.
•	@AfterClass: The @AfterClass method is used only once after executing all tests. This is used to carry out clean-up activities, like disconnecting from a database.
TestNG annotations linked with Selenium are:
@Parameters	You can use this annotation for passing the parameters to the test methods.
@DataProvider	It marks a method as a data source for the test. Every @DataProvider annotated method must always return the value as <Object[ ][ ]>. You can use it in any of the @Test annotated methods.
@Factory	You use it to execute any specific group of test cases with different values. It returns an array of test class objects as the <Object[ ]>.
@Listeners	You can use them with the test classes for the logging function.
@BeforeGroups	It sets up the method to run before the first test method belonging to any of the groups involved in the execution.
@AfterGroups	It sets up the method to run after the execution of all the test methods belonging to any of the groups participating in the test.
@BeforeSuite	Any such method will get called before any of the suites runs from the test.
@AfterSuite	Any such method will stay its execution until all other methods in the current test suite get executed.
@BeforeTest	Instructs the method to run before any test method related to the <classes> which are inside the <test> tag as per the testng.xml file.
@AfterTest	These methods belong to the classes defined in the <test> tag of <testng.xml> file.
@BeforeClass	The method annotated with @BeforeClass gets executed once before the first test method of the current class.
@AfterClass	The method annotated with @AfterClass gets run once after finishing all the test methods in the current class.
@BeforeMethod	Allows a method to run before executing any of the @test annotated methods.
@AfterMethod	Allows a method to take off after all of the @test annotated methods finish their execution.
@Test	Attaches a class or a method to become the part of the test.

 

26. Mention the types of listeners in TestNG.
The types of listeners in TestNG are:
1.	IAnnotationTransformer
2.	IConfigurable
3.	IConfigurationListener
4.	IHookable
5.	IInvokedMethodListener
6.	IInvokedMethodListener2
7.	IMethodInterceptor
8.	ITestListener - TestNG listener for running test
9.	ISuiteListener
10.	IExecutionListener
11.	IReporter

12. Why do testers choose Selenium over QTP?
Feature	Selenium	Quick Test Professional (QTP)
Browser compatibility	It supports almost all popular browsers: Firefox, Chrome, Safari, Internet Explorer, Opera, etc.	QTP supports Internet Explorer, Firefox, and Chrome.
OS compatibility	It supports Windows, Linux, MacOS	It only supports Windows operating system
Distribution	It is distributed as an open-source tool and is freely available	It is distributed as a licensed tool and is commercialized
Application under test (AUT)	It supports the testing of web-based applications only	It supports the testing of both web-based, Windows-based and (client–server) applications
Object repository	Object repository needs to be created as a separate entity in Selenium	QTP automatically creates and maintains the object repository
Language support	It supports multiple programming languages like Java, C#, Ruby, Python, Perl, etc.	It supports only VBScript
Vendor support	As Selenium is a free tool, users would not get the vendor’s support for any issues	Users can easily get the vendor’s support if they face any issues

13. What are the four elements that you have to pass in Selenium?
Four parameters that need to be passed in Selenium are - Host, Port number, Browser, URL

14. What is Same-origin Policy? How can we avoid it?
The ‘Same-origin Policy’ is introduced for security reasons. It ensures that the content of one website will never be accessible by a script from another website. As per the policy, any code loaded within the browser can only operate within that website’s domain.
To avoid this same-origin policy, the proxy injection method is used. In the proxy injection mode, Selenium Server acts as a client-configured HTTP proxy, which sits between the browser and the application under test (AUT) and then masks the AUT under a fictional URL.

16. How will you use Selenium to upload a file?
It can be done in multiple ways:
1. Using element.send_keys("C:\pathOfFile.txt") on web element of ‘input’ tag and type=’file’
2. Using Robot API
3. Using AutoIT
4. Using Sikuli

17. What is the difference between getwindowhandles() and getwindowhandle()?
getwindowhandles(): It is used to get the address / handle of all open browsers, and its return type is Set<String>.
getwindowhandle(): It is used to get the address / handle of the current browser where the control is, and its return type is string.

18. What is Selenese and what are the three types of Selenese?
Selenese is the language in which the scripts for Selenium IDE are written. All the commands available in Selenium IDE are called Selenese.  Three types of Selenese are as follows:
•	Actions: They are used for performing interactions and operations with the target elements.
•	Accessors: They are used for storing values in a variable.
•	Assertions: They are used as a checkpoint.

19. findElememt() vs findElememts()?
 

21. How do you handle a frame in WebDriver?
An iframe (an acronym for ‘inline frame’) is used to insert another document within the current HTML document.
driver.switchTo().frame(“name of the frame”);
driver.switchTo().frame(“ID of the frame“);
driver.switchTo().frame(0); # frame(index)
driver.switchTo().frame(driver.findElements(By.tagName(“iframe”).get(0));#frame(WebElement)
driver.switchTo().defaultContent(); # Select Parent Window / frame
 

22. How do you set the test case priority in TestNG?
 
23. What is a framework? What are the different types of frameworks?
Framework defines a set of rules or best practices or guidelines which we can follow in a systematic way to achieve the desired results in an easier way. Below are types of framework.
Different types of frameworks are as follows:
•	Module-based testing framework: This framework divides the entire application under test (AUT) into several logical and isolated modules. For each module, we create a separate and independent test script. Thus, when these test scripts are taken together, it builds a larger test script representing more than one module.
•	Library architecture testing framework: Instead of dividing AUT into test scripts, with this framework, we segregate the application into functions or rather common functions that can be used by the other parts of the application as well. Thus, we create a common library constituting common functions for AUT. Therefore, these libraries can be called from the test scripts whenever required.
•	Data-driven testing framework:
 
•	Keyword-driven testing framework:
 
•	Hybrid testing framework: A hybrid testing framework is a combination of more than one of the above-mentioned frameworks. The best thing about such a setup is that it leverages the benefits of all kinds of associated frameworks.
•	Behavior-driven development framework: The behavior-driven development framework allows the automation of functional validations in an easily readable and understandable format for Business Analysts, Developers, Testers, etc.
24. In Selenium, what are breakpoints and start points?
Breakpoints: Breakpoints are used to stall the execution of the test. The execution will stop whenever a breakpoint is implemented, and this will help us check whether the code is working properly or not.
Start points: Start points are the points from where the execution should begin. Start points can be used when we want to run the test script from the middle of the code or after a breakpoint.
25. Mention the need for session handling while working with Selenium.
While working with Selenium, we need session handling because during test execution, Selenium WebDriver has to interact with the browser all the time to execute the given commands. It is also possible that, before the current execution completes, someone else starts the execution of another script in the same machine and in the same type of browser. So, to avoid such a situation, we need session handling.
https://www.guru99.com/sessions-parallel-run-and-dependency-in-selenium.html

28. For the database testing in Selenium WebDriver, what API is required?
For the database testing in Selenium WebDriver, we need the JDBC (Java Database Connectivity) API. It allows us to execute SQL statements. But 100% database testing is not possible by using Selenium. Selenium is mainly for functional test, not for database testing.

30. What is XPath? Mention the use of XPath in Selenium testing.
While DOM is the recognized standard way for navigating through an HTML element tree, XPath is the navigation tool used to locate a web element on a web page. The major advantage of XPath is that it helps in identifying the elements dynamically. XPath is one of the locators supported by Selenium WebDriver.
There are two types of XPath:
•	Absolute XPath - Single slash (/) is used to create an absolute XPath path. In this case, the XPath starts selection from the root node of document.
•	Relative XPath - Double slash (//) is used to create a relative XPath path. In this case, the XPath starts selection from anywhere within the document.
Different locators: Id, Xpath, CssSelector, Name, className, tagName, linkText, partialLinkText
 

 

31. What is Selenium? What is Selenium WebDriver?
Selenium is a popular open-source software that is used as a tool to automate web-based applications. It is a set of 4 software tools, and each tool has a different approach to automated testing. Selenium has four major components, namely:
•	Selenium Integrated Development Environment
•	Selenium Remote Control
•	Selenium WebDriver
•	Selenium Grid
Selenium WebDriver is a popular open-source software that is used as a tool to automate web-based applications. It is one of the 4 tools present under Selenium suite.

32. Can WebDriver test mobile applications?
No, WebDriver is a testing tool used for web-based applications. So, we cannot test mobile applications with Selenium WebDriver.

33. Explain how Selenium Grid works.
Selenium Grid creates a test suite that works by forwarding test cases to the hub, and from there, the test cases are redirected to Selenium WebDriver. WebDriver will then execute them in the browser. The test suite allows for running tests in parallel. It is used to execute same or different test scripts on multiple platforms and browsers concurrently to achieve distributed test execution.
Selenium Grid is having two components – Hub & Node. Hub is a server or central point that controls the test execution on different machines. Node is a machine attached to the Hub. There can be multiple Nodes attached to a Selenium Hub. Default port for Selenium Grid – 4444
Advantages:
•	It allows running test cases in parallel thereby saving test execution time
•	Multi browser testing is possible using selenium grid by running the tests on machines having different browsers
•	It allows multi-platform testing by configuring nodes with different OS.
 

34: What are the two types of testing supported by Selenium?
Functional and regression testing. Others are smoke test, sanity test, acceptance test, cross browser test, cross platform test

37: Why would anyone use Selenium IDE when there are better versions of the framework?
There is a legitimate reason for using Selenium IDE - simplicity. It is a Firefox plugin and simplest framework in Selenium suite. It allows record and playback. 
Even though we can create scripts using Selenium IDE, we need to use Selenium WebDriver to write advanced and robust test cases.

38: What operating systems support Selenium?
All three main operating systems - Windows, Linux, and iOS (Mac) [Apple]

47: Name at least two file types that can be used as a source for a framework.
Excel and text files are the most common picks

48: What are the two types of how Selenium IDE can be opened?
Selenium IDE can be opened in either a window mode or a sidebar mode.

49: What are the WebDriver APIs available in Selenium?
FirefoxDriver, ChromeDriver, IEDriver, HTMLUNITDriver, OperaDriver, SafariDriver, AndroidDriver, iPhoneDriver
HTMLUNIT Driver is fastest as its headless.
Programming languages supported – Python, C#, Java, Ruby, Perl, PHP.
OS supported – Windows, Linux, Mac
Open-source frameworks supported – TestNG, Junit, Cucumber, JBehave 

50: How can you use Recovery scenario in Selenium WebDriver?
Using try, catch block

51: How can you do Test Suite execution?
Using CI tools like hudson (Jenkins), Bamboo. Alternatively, we can use windows scheduler to launch the test execution.

54: What is build tools?
We use Ant, Maven to manage build activities for the Java project.

52: How can you send mail stating execution status to all stakeholders?
Using javax.mail library in Java

54: What is version control tools?
We use version control tools like GitHub / SVN to track changes to the files in a project and work in collaboration.

55: Explain framework which you have worked for Selenium project?
Explain each component of framework. Below is a hybrid framework example.
 
 
Folder structure for RestAssured API automation Project: BaseTest.java contains common information required for every test case
  

config.py
 

conftest.py
 
BasePage.py
 
test_base.py
 

LoginPage.py
 
test_LoginPage.py 
HomePage.py 
test_HomePage.py  

56. What is XPath Axis? What are different XPath Axes Used in Selenium Testing?
There are thirteen different axes listed below. However, we’re not going to use all of them during Selenium testing. Refer: - https://www.guru99.com/xpath-selenium.html
1.	ancestor: This axis indicates all the ancestors relative to the context node, also reaching up to the root node.
2.	ancestor-or-self: This one indicates the context node and all the ancestors relative to the context node and includes the root node.
3.	descendent: This indicates the children, and grandchildren and their children (if any) of the context node. This does NOT indicate the Attribute and Namespace.
4.	descendent-or-self: This indicates the context node and the children, and grandchildren and their children (if any) of the context node. This does NOT indicate the attribute and namespace.
5.	child: This indicates the children of the context node.
6.	parent: This indicates the parent of the context node.
7.	following: This indicates all the nodes that appear after the context node in the HTML DOM structure. This does NOT indicate descendent, attribute, and namespace.
8.	following-sibling: This one indicates all the sibling nodes (same parent as context node) that appear after the context node in the HTML DOM structure. This does NOT indicate descendent, attribute, and namespace.
9.	preceding: This indicates all the nodes that appear before the context node in the HTML DOM structure. This does NOT indicate descendent, attribute, and namespace.
10.	preceding-sibling: This one indicates all the sibling nodes (same parent as context node) that appear before the context node in the HTML DOM structure. This does NOT indicate descendent, attribute and namespace.
11.	attribute: This indicates the attributes of the context node. It can be represented with the “@” symbol.
12.	namespace: This indicates all the namespace nodes of the context node.
13.	self: This one indicates the context node.

List the different xpath functions used by you:
Dot “. “	//h3/.	It will give the currently selected node, i.e., h3.
Double dot “.. “	//div/input/..	It will select the parent of the current node. The current node is input so it will select the parent, i.e., “div”.
Asterisk “*“	//div/*	This matches with any of the child nodes of the “div”.
Address and Asterisk “@*“	//div[@*]	It matches any of the div nodes that contain at least one attribute of any type.
Pipe “|“	//div/h5|//div/form	We have selected two different paths i.e. “//div/h5” and “//div/form” using “| “. Using this XPath, we can select both expressions.
text()	//*[text()='3']	
normalize-space()	//*[normalize-space()='3']	
contains()	//*[contains(text(),'13')]	
starts-with()	//*[starts-with(text(),'3')]	
position()	//div/input[position()=’2′]	How do you uniquely identify a web element from list of web elements which have the same xpath?
last()	//div/input[last()]	It will give us the last input node, which is the child of the div node.
or, and		
//input[@name=’xx’], //input[@value=’xx’]		
//*[@id=’Home’]/child::li, //*[@id=’Home’]/child::li[1]		

How to find xpath of calendar:
•	Get the XPath of Calendar and click on the Calendar.
•	Once the Calendar opens, navigate to the desired Year and Month by comparing the current WebElement value with your expected. We can use text() function.
•	Get the xpath of all the date elements of the month (i.e., td elements) and store the elements in a list.
•	Loop through the list of elements and click when the expected date matches with the element in the list.
driver.findElement(By.xpath("//span[@class='fl icon-calendar_icon-new icon-onward-calendar icon']")).click(); 
driver.findElement(By.xpath("//td[text()='Dec 2021']/../..//td[text()='9']")).click();

How to find xpath of a table:
List<WebElement> rows = driver.findElements(By.xpath(“//table/tbody/tr”));
List<WebElement> columns = driver.findElements(By.xpath(“//table/tbody/tr[1]/th”));
int rowcount = rows.length();
int coulumnCount = columns.length();
for(int i=1; i<=rowcount; i++){
	for(int j=1; j<=columnCount; j++){
		value = driver.findElement(By.xpath(“//table/tbody/tr[“+i+”]/td[“+j+”]”)).getText();
}
}
How to find xpath of a dropdown elements:
driver.findElement(By.name(“Country”)).click();
List<WebElement> options = driver.findElements(By.xpath(“//select[@name=’Country’]/option”));
for(WebElement option: options){
	if(option.getText().contains(“India”)){
		option.click();
}
}
57. Things to be considered while designing a framework?
Handle scripts and data separately: - Automation test scripts should be clearly separated from the input data store (e.g. XML, MS-Excel files, Flat files or Databases), so that no modifications are required to the test scripts whenever data has to be changed for multiple input values.
Library: - A library should contain reusable functions for frequently used components and external connections such as databases, generic functions, application functions etc. Software testers should be exposed only to the implemented libraries and tests should be performed by invoking these libraries.
Coding Standards: - Scripting standards should always be maintained across the test automation framework, which will discourage individual coding practices and help in maintaining code uniformity, which makes it easier for software testers and developers to interpret.
Extensibility and Maintenance: - An ideal test automation framework should steadily support all new enhancements to the software application e.g. A reusable library can be created, which would help in enhancing application features with minimal effort.
Script/Framework Versioning: - Versions of framework / scripts should be maintained either in a local repository or versioning tool, which would help in easy monitoring of changes to the software code.

58. Squish vs UFT?
Squish has several great features. Here is a list of the most important ones:
•	It works well with Java applications using Swing/AWT
•	The ability to modify and customize Squish’s object name generator to influence which objects’ properties to use for generating object names when recording scripts
•	Built-in support for data-driven testing and data tables
•	Support of easy-to-learn programming languages for test scripts (JavaScript, Python, Perl, Tcl)
•	Jeppesen Crew Tracking Enterprise is built on Graphical Editing Framework (GEF) technology which include complex custom controls like Time Scale Object , Crew list object (Left Panel), Trip figures (Leg, Briefing, Debriefing, Trip… Etc.), Info tab and many more.
 

 

61. Mention some exceptions in Selenium?
1.	NoSuchCookieException
2.	NoSuchAttributeException
3.	TimeOutException
4.	WebDriverException - Error occurred while deleting cookies from web browser, closing web browser, unable to find the title of the page, the url to navigate to is not valid etc.
5.	ElementClickInterceptedException - The button gets hidden by some pop-up menu eg – sending some text in google search box and clicking on search button. This can be resolved in three ways - Using JavaScript Click, by sending Enter key to Search button instead of click, by clicking on a matching option from auto suggestions.
6.	StaleElementReferenceException - is when you find an element, the DOM gets modified and then you reference the WebElement. This tells that element is no longer appearing on the DOM.  
7.	NotFoundException – It’s has below five subclasses
a.	NoAlertPresentException, 
b.	NoSuchContextException, 
c.	NoSuchWindowException,
d.	NoSuchFrameException,
e.	NoSuchElementException - is thrown when the element you are attempting to find is not in the DOM. This can happen for three reasons. The first is because the element does not exist and never will. To fix this, change your xpath / locator. 
The second is that you need to do something on the page to make the element appear. For example, the user selects Country and javascript populates a City field. If you attempt to look for a city before you select a country, the city you are looking for does not exist and you get a NoSuchElementException. To fix this you must make sure the steps in your test are correct. 
The third is that the WebDriver attempts to find the element before the element is generated by javascript. The fix for this is to use WebDriverWait to wait for the element to appear (visibility and/or clickable).

8.	ElementNotVisibleException- is thrown when the element you are attempting to find is not visible in the Page (but its present in the DOM). Meaning its hidden from displaying in UI.

 
SQL Interview Questions
Query to find Nth largest salary of the Employee without using TOP / LIMIT keywords:
Select Salary from Employee e1 where N-1 = (Select COUNT(DISTINCT Salary) from Employee e2 where e2.Salary > e1.Salary);

Alternate1: select name, max(salary) from Employee where salary < (select max(salary) from Employee where salary < (select max(salary) from Employee))

Alternate2: select TOP 1 salary from (SELECT TOP N salary FROM Employee ORDER BY salary DESC) order by salary ASC;

Alternate3: Select * from Employee order by Salary DESC LIMIT (N-1),1;

Query to find two max salary from Employee table:
Select DISTINCT salary from Employee e1 where 2 >= (select COUNT(DISTINCT salary) from Employee e2 where e2.salary >=  e1.salary) order by e1.salary;

Alternate1: SELECT * FROM Employee WHERE Salary IN (SELECT TOP 2 salary FROM Employee ORDER BY salary DESC)

Alternate2: SELECT TOP 2 * FROM Employee ORDER BY Salary DESC;

Query to find two min salary from EmployeeInfo table:
Select DISTINCT salary from Employee e1 where 2 >= (select COUNT(DISTINCT salary) from Employee e2 where e2.salary <= e1.salary) order by e1.salary;

Alternate1: SELECT * FROM Employee WHERE Salary IN (SELECT TOP 2 salary FROM Employee ORDER BY salary ASC)

Alternate2: SELECT TOP 2 * FROM Employee ORDER BY Salary ASC;

Query to retrieve duplicate records from EmployeeInfo table:
SELECT *, COUNT(EmpID) 
FROM EmployeeInfo 
GROUP BY EmpID
HAVING COUNT(EmpID) > 1;

Alternate: SELECT EmpID, EmpFname, Department, COUNT(*) 
FROM EmployeeInfo 
GROUP BY EmpID, EmpFname, Department 
HAVING COUNT(*) > 1;

Query to find the even record from the EmployeeInfo table:
SELECT * FROM EmployeeInfo WHERE MOD(EmpID, 2) = 0;

Query to find the odd record from the EmployeeInfo table: 
SELECT * FROM EmployeeInfo WHERE MOD(EmpID, 2) = 1;

Query to find the first record from the EmployeeInfo table:
SELECT * FROM EmployeeInfo WHERE EmpID = (SELECT MIN(EmpID) FROM EmployeeInfo);

Query to find the last record from the EmployeeInfo table:
SELECT * FROM EmployeeInfo WHERE EmpID = (SELECT MAX(EmpID) FROM EmployeeInfo);

Query to find first 3 records from EmployeeInfo table:
Select * from EmployeeInfo order by EmpID ASC LIMIT 3;
select * from EmployeeInfo e1 where 3>=(select count(EmpId) from EmployeeInfo e2 where e2.EmpId<=e1.EmpId);

Query to find last 3 records from EmployeeInfo table:
Select * from (Select * from EmployeeInfo order by EmpID DESC LIMIT 3) order by EmpID ASC;
Select TOP 3 * from EmployeeInfo order by EmpId DESC;

Query to copy all rows of a table:
Way1: Create table EmpDetail AS Select * from EmployeeInfo; 
Way2: Create table EmpDetail AS Select EMPID, Salary from EmployeeInfo; 
Way3: Create table EmpDetail AS Select * from EmployeeInfo where 3=4; 	--Creates empty table

Query to find employee and his manager from Employee table:
Select emp.EmpName, mgr.EmpName as ManagerName 
from Employee emp join Employee mgr
on emp.EmpID= mgr.EmpID
where emp.salary < mgr.salary;

Query to find employees from EmployeeInfo table with same name and Department:
Select e1. EmpID, e1.ename, e1. Department
From emp e1, emp e2
Where e1.ename = e2.ename
And e1. Department = e2. Department
And e1. EmpID <> e2. EmpID;

Query to find list of employees from EmployeeInfo table working in the same Department:
Select DISTINCT e1. EmpID, e1.ename, e1.Department
From EmployeeInfo e1, EmployeeInfo e2
Where e1. Department = e2. Department
And e1.EmpID <> e2.EmpID;

Query to delete duplicate records from EmployeeInfo:
Delete e1 from EmployeeInfo e1, EmployeeInfo e2 where e1.emailID = e2.emailID and e1.EmpID  > e2.EmpID;

Query to retrieve first four character of Employee Name from EmployeeInfo:
Select substring(EMPName, 1, 4) from EmployeeInfo;

Query to fetch only the place name(string before brackets) from the Address column: 
SELECT SUBSTRING(Address, 1, CHARINDEX(‘(‘,Address)) FROM EmployeeInfo;

Check whether the passed value follows the specified format or not: 
SELECT ISDATE(’01/04/2020′) AS “MM/DD/YY”; 		-- It returns 1(true) or 0(false) accordingly
ISDATE() depends on the SET DATEFORMAT, SET LANGUAGE, and default language of the SQL Server.

Get the year from a date: SELECT YEAR(GETDATE()) as “Year”;

Query to retrieve Employee Name from EmployeeInfo and replace the space with ‘-’:
Select *, replace(EmpName, ‘ ‘, ‘-‘) from EmployeeInfo;

Query to display total salary after adding 10% to the salary from EmployeeInfo table:
Select EmpID, EmpName, salary+(salary/10) as TotalSalary from EmployeeInfo;

Query to retrieve number of employees from EmployeeInfo whose DOB is between 01/06/1995 and 30/06/1998 grouped by Gender:
Solution1: (When date is passed in ‘YYYY-MM-DD’ format)
Select COUNT(*), Gender from EmployeeInfo 
where DOB between ‘1995-06-01’ and ‘1998-06-30’ Group by Gender;

Solution 2: (When date is NOT passed in ‘YYYY-MM-DD’ format)
Select COUNT(*), Gender from EmployeeInfo 
where DOB between STR_TO_DATE(‘01/06/1995’, ‘%d/%m/%Y’) and STR_TO_DATE(‘30/06/1998’, ‘%d/%m/%Y’) Group by Gender;

Query to retrieve 50% records from EmployeeInfo table:
Solution1: When ID is in proper sequence i.e. no records deleted (and ID starting from 1?)
Select * from EmployeeInfo where EmpID <= (select COUNT(EmpID)/2 from EmployeeInfo);

Solution2: When ID is not in proper sequence i.e. records are deleted
Set @count = select COUNT(EmpID)/2 from EmployeeInfo;
Prepare STMT from ‘select * from EmployeeInfo LIMIT ?’;
Execute STMT using @count;


 
Performance Testing FAQs
Refer: 
https://www.guru99.com/jmeter-interview-questions.html
https://www.youtube.com/watch?v=WvIFT6n31ks

Service Testing FAQs
1. What Are Web Services?
Web services are client and server applications that communicate over the World Wide Web’s (WWW) HyperText Transfer Protocol (HTTP). Web services provide a standard means of communication between software applications running on a variety of platforms and frameworks. 
Service is representative of a repeatable business task.
2. Which protocol is mainly used in web services?
The protocols used in web services are 1.Transport Protocol: used for transporting messages between network applications and includes protocols such as HTTP(s), SMTP, FTP etc.
3. What is the difference between XML serialization and soap serialization?
XML serialization will serialize only public members of a class whereas SOAP serialization happens for private as well as public members of a class.
4. Which protocol is used by web service and web service consumer to communicate with each other?
•	Resutful does not use SOUP and it can be used for webService communication. So the "communication protocol" does not have to be SOUP. 
•	SOAP is a XML based 'message' that a web service client can send to an actual web service (& vice versa). The reason why this message is termed as a 'protocol' is because the XML s...
5. What is soap and how it will be utilized in web-components?
•	SOAP (Simple Object Access Protocol) is a communication protocol which is platform and language independent. For example, the client side code might have been written using C and the server side is,s...
•	SOAP was first offered in 1990's and was introduced to W3C in 2000. The main purpose of SOAP is to be able to send request to invoke programs on remote computers using XML wrappers.
6. What is the use of UML?
•	Unified Modeling Language (UML) is a standardized general-purpose modeling language in the field of software engineering. UML includes a set of graphical notation techniques to create abstract models of specific systems. 
7.	What are the advantages of soap over standard http requests?
•	SOAP provides a shared language for mapping structured data transmitted over the wire. This enables processes of different platforms and architectures to decode the serialized data structures which they understand.
•	SOAP is a firewalls friendly way to make remote procedures call. SOAP may also be used over HTTPS (since it is the same protocol as HTTP at the application level). It can leap through firewalls.
8.	Why to use SOAP? 
•	SOAP provides some features like Security, Reliable Messaging, Atomic transaction which are not available in REST API.
•	The main reason of using soap is security and it does not give Proxy error. It uses SSL and WS-security so our business will be more secure. And a soap request can`t be cached.
•	SOAP is a mean of communication among software applications based on different kinds of technologies and platforms. SOAP allows easier communication over HTTP.
•	WS-Security & WS-SecureConversation Provide support for using security tokens like Kerberos, and X.509.
•	WS-ReliableMessaging Reliable messages delivery between distributed applications in case of failures.
• 	WS-AtomicTransaction, two-phase commit across distributed transactional resources
9.	Explain about soap with an example of industry usage.
•	SOAP is a simple object access protocol, it is a protocol for exchanging xml based messages over network using HTTP. There are several different types of messaging patterns in SOAP.
•	SOAP is a protocol that works in conjunction with HTTP to call a remote method over different platform and technology. 
Interview Questions – 1st (Medtronic)
1. split() vs join()

input_string : Geeks for Geeks
list_string = input_string.split(' ')
Output : ['Geeks', 'for', 'Geeks']

Join the list of strings into a string based on delimiter (' ')

list_string:  ['Geeks', 'for', 'Geeks']
output_string = ' '.join(list_string)
Output : Geeks for Geeks

2. Unary Operator in Python
Addition: - The + operator in Python can be utilized in a unary form. The unary structure implies character, restoring the same value as its operand.
Subtraction: - The – operator in Python can be utilized in a unary form. The unary structure implies negate, restoring the nullified an incentive as its operand: zero to zero, positive to negative, and negative to positive.
3. Python zip() function
The purpose of zip() function is to map the similar index of multiple containers / sequences so that they can be used just as a single entity.

4. Some Python code snippet
Float values are not allowed in range. e.g. range(1.5,10.4) will throw TypeError exception
lst = [10,20,30,40]
b = bytes(lst)
b[0]=5
TypeError: 'bytes' object does not support item assignment

fs1.add('v') #AttributeError: 'frozenset' object has no attribute 'add'

If first argument is str data type, then the complex function will not allow second argument; Will throw TypeError.

int(“11.2”)	Will throw ValueError
int(“ten”) 	Will throw ValueError
int(“0b111”)	Will throw ValueError
int(20+30j)	Will throw TypeError
float (“ten”)	Will throw ValueError
float (“0b111”)	Will throw ValueError
float (20+30j))	Will throw TypeError

join(iterable)	It converts an iterable (i.e. list, set, tuple, str etc.) into a string which is the concatenation of the strings in iterable. A TypeError will be raised if for any non-string values in iterable.
index(substr[,start [,end]])	It returns the lowest index in the string where substr is found. Raises ValueError when the substr is not found.
rindex(substr[,start [,end]])	It returns the highest index in the string where substr is found. Raises ValueError when the substr is not found.
setObject.remove(setElement)	Removes specified element; Returns KeyError if element is not found
setObject.pop()	Removes and returns random element; Returns KeyError if no element is found
setObject.discard(setElement)	Removes setElement if found; Does not throw error if setElement is not found.
listObject.remove(listElement)	Removes the first item with the specified value listElement; Return ValueError if listElement is not in the list
listObject.pop(listIndex) or listObject.pop()	Removes and returns the element from the specified position; Return IndexError if incorrect index is given, or list is empty

int, float, complex, bool objects cannot be converted into iterable objects because they do not follow iterator protocol. It throws TypeError exception if we try to convert them into iterable objects.

Python uses two strategies for memory allocation:
•	Reference counting
•	Garbage collection

import urllib.request.urlopen 		#Web scrapping
import urllib.request.urlretrieve

Interview Questions – 2nd (Mindtree)
Introduction: - Hi, this is Vijay. I am currently working in Persistent Systems Limited as a Quality Lead Engineer; leading a team of 7 people currently and we are working for Vertex account which is a provider of corporate Tax Software to various large and medium organizations. 
Before Persistent, I was in Cognizant Technology Solutions where, in my last project, I was leading four teams comprising of 20+ people. I was the single point of contact for deliverables of the account, the entire deliverables used to go via me. The different teams were - Functional, automation, API, Database. My tasks include - reviewing the deliverables, managing and leading the team. Apart from this I was also involved in - 
•	[Plan and Develop the Project Idea. Every project starts as an idea. ...]
•	[Create and Lead Your Dream Team. ...]
•	Monitor Project Progress and Set Deadlines. ...
•	Solve Issues That Arise. ...
•	Evaluate Project Performance.
•	Ensure Stakeholder Satisfaction. ...
•	Manage the Project Cost, client handling, billing. ...
	
I did my graduation in B.Tech. from St. Thomas’ College of Engineering and Technology. I have around 12.5 years of overall experience in software industry. During my career, I got the opportunity to work in different domains like – Insurance, Retail, Banking, Airlines and Tax domains.
PSL- The current project I am working is Payroll Tax project. Here we get MDU and Quarterly data change report on the EE/ER Payroll tax rate/rule from different states and Federal govt in US and we need to validate that these changes are not breaking the Payroll Tax software. 
Here we do two kinds of validation. One in QPAYTester which is their internal tool where we enter the different test data combinations in input section and In the output section of QPAY tester we populate the expected tax. When we run the test, the QPAY generates the actual tax output and when the actual and our expected match the test is passed. 
The other type of validation we do is output XML file validation. Which we do for running our regression test suites. The xmls are usually very big and complex. So here we take help of automation for comparing the Gold response files with the currently generated response files.
CTS-The last project in Cognizant I worked on was Crew Management project for Airline’s domain. 
This project has two modules – Crew Access and JCTE Client. Crew Access is a web application used by Pilots and Flight Attendants to view the duties and trips assigned to them. They can also Trade, Swap, Pick and Drop a trip based on some conditions and as per their requirements. And this module is automated using Java-Selenium. 
JCTE Client is a desktop application used by scheduler to assign trips and other activities to the Pilots and Flight Attendants. And this module is being automated using Squish-python.

Defect management tool – HPALM / JIRA (using Zephyr plugin)
Requirement tool – HPALM / ADO (In user story format) / JIRA (In user story format)
Metric to track the progress of project – Burn down
Have you worked on mobile testing: - Yes
Eye contact should be proper..
Introduction should be proper..
Have you ever suggested anything which has been implemented?
•	Write File Utility in SOA
•	Leave and downtime tracking for employees
•	Part of CI team where we have ??

Interview Questions – 3rd (Vacobinary)
1. Soft Assert vs Hard Assert 
2. Assert vs Verify 
3. selectbyvisibletext, selectByValue, selectByIndex is not there, then how to select value from dropdown?
4. How to enter value (id/pwd) in pop up in selenium?
Interview Questions – 4th (Cigniti)
1. What is the difference between range & xrange?
Ans: For the most part, xrange and range are the exact same in terms of functionality. They both provide a way to generate a list of integers. The only difference is that range returns a Python list object and x range returns an xrange object (which is a kind of generator object). It creates the values as you need them with a special technique called yielding used with generators. That means that if you have a really gigantic range you’d like to generate a list for, say one billion, xrange is the function to use.
2. random.shuffle()?
from random import shuffle
import random
list = [20, 16, 10, 5]
random.shuffle(list)
print ("Reshuffled list : ",  list)
random.shuffle(list)
print ("Reshuffled list : ",  list)
Output
Reshuffled list:  [16, 5, 10, 20]
Reshuffled list:  [20, 5, 10, 16]
3. array.array
https://www.programiz.com/python-programming/array
import array as arr
My_Array=arr.array('i',[1,2,3,4,5])
My_Array[::-1]
Output
array('i', [5, 4, 3, 2, 1])
4. search() vs match()
search() returns the first match object of match string in target string whereas match() returns match object if match is found in the beginning of target string.
5. Relative locators?
6. About Selenium 3.0?
7. Exception handling keywords?
8. list, tuple, set, dict ?
9. isalnum()
str="Python is a programming language"
print(str.isalnum())#False
str="This is Interview Question17"
print (str.isalnum())#False because space should not be there for the string to be alnum type
10. What is slicing? What is the output of below snippet?
s='catandapple'
print(s[6:])# apple
11. What is action class in Selenium?
12. Can Selenium handle window popup?  No
13. What is pass in python?
14. How do you rate yourself in python and selenium?  3.5/3.5
15. What is generator?
Interview Questions – 5th (Tech M)
1. What is dynamic polymorphism?
Static Polymorphism also known as compile time polymorphism – e.g. - Method Overloading
Dynamic Polymorphism also known as runtime polymorphism – e.g. - Method Overriding
2. What are different black box testing techniques?
3. Swap two numbers without using temporary variable
a=a+b; 
b=a-b; 
a=a-b;
In Python - a,b = b,a
4. Example of method overriding & overloading from Selenium framework?
Overloaded Methods in Selenium are:-
•	.frame(“<Name or ID or Index or WebElement>”)
•	.findElement(“<All type of locator e.g. id , xpath , cssClass>”)
•	Implicit wait is an example of overloading. In Implicit wait we use different time stamps such as SECONDS, MINUTES, HOURS etc.
•	WebDriverWait methods
•	Action class in TestNG is also an example of overloading.
•	Assert class in TestNG is also an example of overloading.
Overridden Methods in Selenium are:-
•	WebDriver driver = new FirefoxDriver(); [Example of Interface in framework also]
•	get and navigate methods of different drivers

4. Mention some exceptions in Selenium?
Refer Selenium section

5. Method hiding in oops?
Method hiding means subclass has defined a method with the same signature as the superclass method. In that case the method of superclass is hidden by the subclass. It signifies that the version of a method that is executed will NOT be determined by the object that is used to invoke it.

Interview Questions – 6th (Tech M)
1. How to read value from a table in webpage in Selenium?
2. Selenium architecture?
3. Waterfall vs agile?

Interview Questions – 7th (IBST)
1. Write python code to get duplicate of numbers from list along with count
l = [2,3,4,5,2,3,2,1]
d = {}

for x in l:
	d[x] = d.get(x,0) + 1
	
for k,v in d.items():
	if (v>1):
		print(k+"-->"+v)
2. Linux commands
tee command in linux
cat command in linux
more / less
filter case insensitive records from file

3. API related questions
•	About API testing framework – pytest framework
•	Authentication type in API?
•	OAuath/ OAuth2?
•	status code from API
•	PUT / Patch, POST
4. SQL query to find employee and his manager from Employee table.

Interview Questions – 8th (Persistent)
1. API response json to dict and vice versa.
2. Order of execution of multiple decorators for a single function?
1.	def decrator_a(func):
2.	    print("enter decrator_a")
3.	    def inner_a(*args,**kwargs):
4.	        print("enter inner_a")
5.	        ret = func(*args,**kwargs)
6.	        print("leaving  inner_a")
7.	        return ret
8.	    print("leaving decrator_a")
9.	    return inner_a
10.	    
11.	def decrator_b(func):
12.	    print("enter decrator_b")
13.	    def inner_b(*args,**kwargs):
14.	        print("enter inner_b")
15.	        ret = func(*args,**kwargs)
16.	        print("leaving  inner_b")
17.	        return ret
18.	    print("leaving decrator_b")
19.	    return inner_b
20.	    
21.	@decrator_a
22.	@decrator_b 
23.	def f(*args,**kwargs):
24.		print("==f==")
25.	#Equivalent to decrator_a(decrator_b(f))
26.	f()
The execution result is:
1.	>>> 
2.	RESTART: C:/Users/Administrator/AppData/Local/Programs/Python/Python36/tests/decrator_test.py
3.	enter decrator_b
4.	leaving decrator_b
5.	enter decrator_a
6.	leaving decrator_a
7.	enter inner_a
8.	enter inner_b
9.	==f==
10.	leaving  inner_b
11.	leaving  inner_a
Explanation: - The execution order of the decorator is from bottom to top, and the function is called from top to bottom.
Interview Questions – 9th (Synchron)
1. Chrome capability? How will u handle infobar in Chrome browser? Apart from Desired capability any other means to do that?
ChromeOptions options = new ChromeOptions();
options.addArguments("--disable-infobars");
2. Window handles return type?
Return type of getWindowHandle() is String while return type of getWindowHandles() is Set<String>. The return type is Set as window handle is always unique.
3. Which is better PUT or POST? What is idempotent operation?
4. Difference between delete and truncate?
Delete from tablename Deletes a particular record based on condition; if no condition deletes all records
Truncate table tablename Deletes all records quickly
5. 3rd largest salary of the Employee. Select salary from Employee e1 where 2=(select count(DISTINCT salary) from salary e2 where e2.salary>e1.salary);
6. Chaining of constructor?
Constructor chaining is the process of calling one constructor from another constructor with respect to current object. Constructor chaining occurs through inheritance. Constructor chaining can be done in two ways:
Within same class: It can be done using this() keyword for constructors in same class
From base class: By using super() keyword to call constructor from the base class.

Interview Questions - 10th (Valuelab)
1. Take two 2-D array and add the elements in a third array?
l1=[[10,20],[30,40]]
l2=[[50,60],[70,80]]

len1=len(l1)
len2=len(l2)
l3=[]

for i in range(len1):
    for j in range(len2):
        item = l1[i][j] + l2[i][j]
        l3.append(item)
        
print(l3)
l4 = l1 + l2
print(l4)

Output:
[60, 80, 100, 120]
[[10, 20], [30, 40], [50, 60], [70, 80]]

Interview Questions - 11th (Ericson)
1. Data analytics related questions?
2. Advanced excel related questions – VLookup vs HLookup?

Interview Questions - 12th (Persistent)
1. WAP to generate fibonaci series?
def printFibonacciSeries(n):
    f=0
    s=1
    print(f,s,end=" ")

    while True:
        next=f+s
        if (next <=n):
            print(next, end=' ')
        else:
            break
        f=s
        s=next

printFibonacciSeries(25)
2. What will be the output of below program?
arr = {}
arr[1] = 1
arr['1'] = 2
arr[1] += 1

sum = 0
for k in arr:
    sum += arr[k]

print(sum) #4
3. What will be the output of below program?
def addone(index):
    if index in fruit:
        fruit[index] += 1
    else:
        fruit[index] = 1


addone('Apple')
addone('Banana')
addone('apple')
print(len(fruit)) #3

Interview Questions - 13th (TSYS)
1. Conflict handling within the team?
2. Framework design on your own, what you will need?
3. POM framework? Where will you keep the drivers?
4. How will you authenticate without sending id/password? Bearer & oauth2?
5. How to determine not an automation candidate test?
6. Which requires less maintenance – backend or front end?
7. How can you work in team?

Interview Questions - 14th (AIS)
1. How will you click on a check box which is beside a phone number column? 
How to relate two webElements in xpath if these two elements are not having unique locator?
Using Xpath axis
2. What is the difference between PUT & PATCH if only update has to be done?
3. What is Xpath Axis? What are different XPath Axes Used In Selenium Testing?
4. Example of API you have worked on?
5. Things to be considered while designing a framework?
6. Squish vs UFT?
7. What is a framework? Why we use it?
8. Do you automate all test in a sprint?
9. How will you calculate ROI?
10. Sprint review meeting?
11. How to make sure all the webelements in a page is loaded?
12. Multithreading vs multitasking in python?

Interview Questions - 15th (Cyient)
1. How CI & CD happens in ADO?
The CI/CD process automatically deploys your latest work to your website. Each change to the GitHub repo starts a build in Azure DevOps, and a CD pipeline runs a deployment to Azure
2. Test strategy for testing a system consisting of a web application, a mobile and a Bluetooth device; mobile is getting the data from the blue tooth device and giving the output to the web application?
Interview Questions - 16th (RedSeal)
1. How did you do performance testing; did you simulate users?
Interview Questions - 17th (TSYS)
1. WAP to generate fibonaci series
2. WAP to find missing / duplicate number in a list
l=[1,2,4,5,3,3] #or l=[1,2,4,5]
d={}

for x in l:
    d[x] = d.get(x,0) + 1

for k,v in d.items():
    if v > 1:
        print("Duplicate Number: ", k,"--->",v)

l2=sorted(d.keys())
for k in range(len(l2)-1):
    if (l2[k]+1 != l2[k+1]):
        print("Missing Number: ",l2[k]+1)
3. WAP to calculate area of circle and then implement unit test cases for that
import unittest
import math

class Circle:
    def __init__(self, radius):
        try:
            if not isinstance(radius, (int, float)):
                raise TypeError
            elif 1000 >= radius >= 0:
                self.radius = radius
            else:
                raise ValueError
        except ValueError:
            raise ValueError("radius must be between 0 and 1000 inclusive")
        except TypeError:
            raise TypeError("radius must be a number")

    def area(self):
        y = math.pi * (self.radius ** 2)
        return round(y, 2)

    def circumference(self):
        x = math.pi * 2 * self.radius
        return round(x, 2)

class TestCircleCreation(unittest.TestCase):
    def test_creating_circle_with_numeric_radius(self):
        c1 = Circle(2.5) #Define a circle 'c1' with radius 2.5
        self.assertEqual(c1.radius, 2.5) #Check  the value of c1.radius equal to 2.5 or not

    def test_creating_circle_with_negative_radius(self):
        c = Circle(-2.5) # Try Defining a circle 'c' with radius -2.5 and see
        self.assertEqual(c.radius, -2.5) # if it raises a ValueError with the message
        self.assertRaises(ValueError)

    def test_creating_circle_with_greaterthan_radius(self):
        c = Circle(1000.1) # Try Defining a circle 'c' with radius 1000.1 and see
        self.assertEqual(c.radius, 1000.1) # if it raises a ValueError with the message
        self.assertRaises(ValueError)

    def test_creating_circle_with_nonnumeric_radius(self):
        c = Circle('hello') # Try Defining a circle 'c' with radius 'hello' and see
        self.assertEqual(c.radius, 'hello') # if it raises a TypeError with the message
        self.assertRaises(TypeError)

if __name__ == '__main__':
    unittest.main()

Refer: - https://www.youtube.com/watch?v=ePR9QrOIbhE
https://stackoverflow.com/questions/54616018/unit-testing-using-unit-test-in-python3

Interview Questions - 18th (Sony)
1. WAP which returns a generator consisting of the each element of the list squared
print("Generator implemented through tuple comprehension....")
l=[1,2,3,4,5]
g = (i*i for i in l)
for item in g:
    print(item, end=' ')

Interview Questions - 19th (eInfoChips)
1. WAP to print all the combinations of a string (say, GOD)
from itertools import permutations
print([''.join(p) for p in permutations('ABC')])

2. I have my code written in Python 2.7. How will I convert them to Python 3?
We can convert Python2 scripts to Python3 scripts by using 2to3 module. It changes Python2 syntax to Python3 syntax. We can change all the files in a particular folder from python2 to python3.
3. WAP to find the second highest number from a given list without using any inbuilt function
def doBubbleSort(l):
    n = len(l)-1
    for x in range(n):
        for y in range(n-x):
            if l[y] > l[y+1]:
                l[y], l[y+1] = l[y+1], l[y]

l=[10,20,60,30,40,50]
print("Original list: ", l)
doBubbleSort(l)
print("Bubble sorted list: ", l)
print("Second highest number from the list: ", l[-2])
print("Second lowest number from the list: ", l[1])

4. WAP to print name where role is dev from below input data
{
"employees":
[
{
"name": "A",
"role": "dev",
"nbr": 1
},
{
"name": "B",
"role": "dev",
"nbr": 2
}
],
"firm":
{
"name": "ABC",
"location": "CA"
}
}
 
f= open('C:\\Users\\201359\\Desktop\\Employees.txt')
text = f.read()
print(text)
dict_str = json.loads(text)
print(dict_str)
d= dict_str['employees']
for list in d:
    for k in list:
        if (k=='role'):
            print("Role : {}".format(list[k]), end='')
    print()

5. Write tests for login functionality for a banking application
1. Enter correct user name and correct password and enter the incorrect OTP and verify if you are not being allowed to login
2. Enter correct user name and incorrect password and verify that you are not being allowed to login
3. Enter correct user name and incorrect password, m number of times and verify that your account is locked out
4. Enter incorrect user name and incorrect password and verify the error message you are getting
4. Enter incorrect user name and correct password and verify the error message you are getting
5. Enter correct user name and correct password and enter the correct OTP and verify if you ae being allowed to login successfully

Interview Questions - 20th (eInfoChips)
1. Write a recursive function to reverse a string
2. Write a regex for email ID
3. Method overloading in Python?
https://www.geeksforgeeks.org/python-method-overloading/
Enumerate() in Python - https://www.geeksforgeeks.org/enumerate-in-python/?ref=leftbar-rightbar
4. Configurations for release pipeline?
6. Difference between Process and Thread: 

Process	Thread
Process means any program in execution.	Thread means segment of a process.
It takes more time to terminate.	It takes less time to terminate.
It takes more time for creation.	It takes less time for creation.
It takes more time for context switching.	It takes less time for context switching.
It is less efficient in term of communication.	It is more efficient in term of communication.
Process consume more resources.	Thread consume less resources.
Process is isolated.	Threads share memory.
Process is called heavy weight process.	Thread is called light weight process.
Process switching uses interface in operating system.	Thread switching does not require to call a operating system and cause an interrupt to the kernel.
If one process is blocked then it will not effect the execution of other process 	Second thread in the same task could not run, while one server thread is blocked.
Process has its own Process Control Block, Stack and Address Space.	Thread has Parents’ PCB, its own Thread Control Block and Stack and common Address space.
Interview Questions – 21st (Estuate)
1. Interface vs Abstract class?
2. Explain CRAFT framework
Interview Questions - 22nd (Qentelli)
1. Write Decorator method.
2. Find the number of ‘python’ in the given below string.
s="This is python. python is a programming language. Is it python?"
l = s.split()
print(l)
counter = 0
for x in l:
    if ('python' in x):
        counter +=1
print(counter)

3. Write list comprehension.
l=[10,20,30]
listSquare = [i*i for i in l]
4. Implement zip function. 
l1=[10,20,30,40]
l2=['ten', 'twenty', 'thirty']
d = dict(zip(l1,l2))
print(d) # {10: 'ten', 20: 'twenty', 30: 'thirty'}
5. Map two lists without using zip function.
l1= [10,20,30,40]
l2=['ten', 'twenty', 'thirty']
mapped = dict(map(lambda x, y: [x, y], l1, l2))
print(mapped) # {10: 'ten', 20: 'twenty', 30: 'thirty'}
6. pytest marker related question.
pytes -m smoke regression ?
Note: - pytest supports running Python unittest -based tests out of the box. It's meant for leveraging existing unittest -based test suites to use pytest as a test runner and also allow to incrementally adapt the test suite to take full advantage of pytest's features.
7. static vs class variable.
static vs class variable - Static or class variable is common variable for all the objects of the class. Memory is allocated only once. e.g. – Bank name, Rate of interest etc. It is referenced by class name within the class and by class name & object reference variable outside the class.
8. static vs class methods.
Refer - https://www.geeksforgeeks.org/class-method-vs-static-method-python/

Interview Questions - TCS
1. Parallel execution in Cucumber ==> https://cucumber.io/docs/guides/parallel-execution/
2. Scrap framework ==> ?
3. xpath: https://www.verizon.com/smartphones/
•	//div[contains(@tabindex, '-1')]
4. JBehave: ==>https://www.onlineinterviewquestions.com/jbehave-interview-questions/
•	JBehave is a pure Java framework, while Cucumber is a generalized BDD framework implemented in different languages and can be made available as a testing framework in various different contexts. Cucumber is internally based on Ruby. Both are very mature frameworks.
•	JBehave and Cucumber are completely different frameworks, although meant for the same purpose: acceptance tests. They are based around stories (JBehave) or features (Cucumber) which is a collection of stories.
•	If you're looking to implement a BDD framework for a Java project, then your comparison should mainly be between JBehave and Cucumber-JVM (the pure Java implementation of Cucumber).
6.	Right click on a webpage, a pop-up menu opens, how will you select an option from the menu==> Robot class

Interview Questions - EY
1. Agile (Acceptance criteria, story point, entry exit criteria, story, feature, Epic, spike user story, DSM, Retrospective call, Sprint planning call)
2. Java (String manipulation):- https://soshace.com/top-20-java-string-interview-questions-and-answers/
https://www.softwaretestinghelp.com/core-java-interview-questions/
3. DB (max salary of Employee, top 5 salary data): 
https://www.edureka.co/blog/interview-questions/sql-query-interview-questions
https://www.upgrad.com/blog/sql-query-interview-questions-answers/
4. Scenarios (Test cases for Amazon card, regression vs retest)
5. Nonfunctional (Security testing, Penetration testing)
6. Java-Selenium, Python, SQL, API, Property & Casualty Insurance- Guidewire product
6. If a high priority bug comes at last time before deployment, how to handle this?
Explain the situation to client and ask some more time to fix the bug. If the client is not ready to give time, then analyze the impact of defect and try to find workarounds for the impact and mention these issues in the release notes as known issues / bugs or known limitations. Here the workaround means remedy process to be followed to overcome the effect of the defect.

1. What are Hooks in Cucumber? 
Cucumber supports hooks, which are blocks of code that run before or after each scenario. You can define them anywhere in your project or step definition layers, using the methods @Before and @After. Cucumber Hooks allows us to better manage the code workflow and helps us to reduce the code redundancy. 
Refer: https://www.toolsqa.com/cucumber/cucumber-hooks

2. If there are 100 check boxes and you have given implicitly wait of 30 sec, then will the 30 secs be applicable to all 100 checkboxes if the first check box is enabled in 10 sec?

3. Apart from project what's your contribution?

4. Get absolute numbers of list
	my_list = [18, -3, 5, 0, -1, 12]
	l = list(map(lambda x:abs(x),my_list))
5. How to do commit from one branch to another branch in git?
The other way to move introduced work from one branch to another is to cherry-pick it. A cherry-pick in Git is like a rebase for a single commit. It takes the patch that was introduced in a commit and tries to reapply it on the branch you’re currently on. Example: git cherry-pick < commitID from another branch> ==> Gets changes from the commitID to the current branch so that it can be modified on the current branch and pushed back again in the current branch.

Interview Questions - Intellizest
API
1. What are different methods in Rest API?
2. Get vs Post?
3. Put vs Post?
4. Put vs Patch?
5. What is Bad Request? When we get it?
6. What are 401, 500?
7. Where to give authorization in Postman tool?
8. What are different success codes in API? ==> 200, 201, 202
9. How to create request and response through Java code?
10. Different components of API url ?
Java
1. What is Synchronization?
2. Wrapper class?
3. Singleton class?
4. Hashset vs ArrayList?
5. final vs finally?
6. static vs instance variables?
7. Interface vs abstract class?
8. What is constructor?
9. Constructor vs method?
10. String vs StringBuffer?
Selenium
1. getWindowHandle() vs getWindowHandles(). Their return types?
2. How to handle ElementNotVisibleException ==> Using javascript
3. Exceptions in Selenium?
4. What is WebDriver?
5. Can we write ChromeDriver driver = new ChromeDriver() ?
6. Implicit vs Explicit wait?

Interview Questions – Globant
1. How to set driver variable in Base class in below snippet?
WebDriver driver = new ChromeDriver();

2. Is the following code snippet valid?
public interface iGlobant1 {
	int x = 20;
	void m1();
}
public interface iGlobant2 extends iGlobant1{
	void m2();
}
public abstract class ClassGlobant implements iGlobant2{//Class can’t extend interface, it can only implement
	abstract void m3();
}
public class ClassGlobantClient extends ClassGlobant{
	public void m1(){
		//implement the body
		}
		public void m2(){
		//implement the body
		}		
		void m3(){
		//implement the body
		}
}
3. Is the following code snippet valid?
import java.io.IOException;

public class ClassGlobantException {
	public static int getNumber(int num){
		try{
			int x = num/0;
			return 20;
		}
//		catch(IOException ae){ //Unreachable catch block for IOException. This exception is never thrown from the try statement body
//			return 45;
//		}
//		catch(Exception ae){
//			return 50;
//		}
		catch(ArithmeticException ae){ //Unreachable catch block for ArithmeticException. It is already handled by the catch block for Exception
			return 30;
		}
		finally{ // Warning: finally block does not complete normally
			return 55;
		}
//		return 100; // Unreachable code. Compilation error
	}
	public static void main(String[] args) {
		int n = getNumber(5);
		System.out.println(n);
	}
}
4. Sort the input array in ascending order of numbers appearing after (:).
String input[] = {"10:20", "11:05", "12:10", "05:30", "01:45", "09:09"}
String output[] = {"11:05", "09:09", "12:10", "10:20", "05:30", "01:45"}
5. Write code snippet to send some text to the first input box out of many input boxes on a page.
driver.findElements(By.xpath("//input")).get(0).sendKeys("Hello");
7.	Write code snippet to get the salary of the person whose name is ABC from the below table on page.
Select 	Age 	Salary 	Name 
1.      	30   	15000	XYZ
2.      	40   	10000	ABC
3.      	35   	20000	LMN
8. What is the disadvantage of POM?
Disadvantages of Page Object Model:
•	Developers may develop duplicate web elements if naming convention is not followed.
•	If a web page contains multiple div or iframe, POM class becomes bigger and difficult to manage. You can break pages into multiple subpages.
•	If webpage contains similar elements in different div/frame, you need to be careful about naming convention.
•	You need to be little good in coding.
•	POM is specific to project. It is not generic.
•	You can get StaleElementException in case of findElement.

Interview Questions – Tech M
1. Things to be done before creating a framework
https://www.softwaretestingmaterial.com/building-a-fresh-test-automation-project-framework/
2. Stash?
3. Branching?
4. Test management tool?
5. OOPs concept in selenium project? 
https://www.softwaretestingmaterial.com/oops-concept-in-automation-framework/
6. Can we overload main method?
	The answer is, yes, we can overload the main() method. But remember that the JVM always calls the original main() method. It does not call the overloaded main() method. Refer - https://www.geeksforgeeks.org/how-to-overload-and-override-main-method-in-java/
Note: we cannot override main method of java because a static method cannot be overridden.
7. Static variables?
8. Can we remove static keyword from main method?
When java runtime starts, there is no object of the class present. That’s why the main method has to be static so that JVM can load the class into memory and call the main method. If the main method won’t be static, JVM would not be able to call it because there is no object of the class is present. Refer - https://www.journaldev.com/12552/public-static-void-main-string-args-java-main-method
9. Lambda function in python?
10. Negative indexing in Python?
11. HashMap and Hash Table? HashMap can allow null keys and values?
HashMap allows one null key and multiple null values whereas Hash table doesn't allow any null key or value.
13. Can we override private method?
In Java, methods declared as private can never be overridden, they are in-fact bound during compile time. The protected method of a superclass can be overridden by a subclass. If the superclass method is protected, the subclass overriding method can have protected or public (but not default or private) which means the subclass overriding method cannot have a weaker access specifier.
14. decorator in python?
15. super vs super() in Java?
The super keyword in java used to deal with parent class object while super() is used to deal with parent class constructor. Refer - https://www.geeksforgeeks.org/difference-between-super-and-super-in-java-with-examples/
16. JMeter?
17. Annotations in TestNG and their order?

Interview Questions – Quest
1. Have you worked on creating interfaces or only used it? Is the following code snippet acceptable?
interface iA
    {
        public double Calc();
    }
    interface iB
    {
        public double Calc();
        public string testStr();
    }
class testClass implements iA, iB
    {
        double iA.Calc()
        {
            throw new NotImplementedException();
        }
        pubilc double iB.Calc()
        {
            throw new NotImplementedException();
        }
        public string testStr()
        {
            throw new NotImplementedException();
        }
    }
No, only one Calc() should be implemented in the class. Below is the modified code snippet.
public interface iA {
	public double Calc() throws NotImplementedException;
}
public interface iB {
	public double Calc() throws NotImplementedException;
	public String testStr() throws NotImplementedException;
}
public class iTestClass implements iA, iB{
public double Calc() throws NotImplementedException{
throw new NotImplementedException();
}
public String testStr() throws NotImplementedException{
throw new NotImplementedException();
}
}
2. Write a java function which will take two parameters (string, int) and print the number of chars denoted by the int variable.
public void printChars(String s, int n){
System.out.print(s.substring(0,n));
}
3. Code snippet on inheritance concept?
4. What are the xpath locators you have worked on?
5. Write an xpath using following-sibling: driver.findElement(By.xpath("//some valid locator"::following-sibling));
6. What is By in findElement(By.xpath("//some xpath”));
	public abstract class By extends java.lang.Object
7. What type of exceptions have you found in Selenium?
8. What is StaleElementReference exception?
9. What is the meaning of 201 code in API?
10. How to send request to an API through automation?
11. What type of validations (only success codes or anything else) you have done in API?
12. Write an SQL query to find the Student having 3rd highest marks from Student table(columns- Id, name, class, marks): Select * from Student s1 where 2=(select count(DISTINCT marks) from Student s2 where s2.Id>s1.Id);
13. Have you worked on CI/CD job? What type of job you have created in CI/CD?
14. What are the things to consider before starting automating tests / creating Automation Framework?
Interview Questions – Virtusa
1. Can constructor be private?
Java allows us to declare a constructor as private. Note that if a constructor is declared private, we are not able to create an object of the class. Instead, we can use this private constructor in Singleton Design Pattern. A private constructor in Java ensures that only one object is created at a time. Below is the example of a singleton class implementation.

import java.io.*;
public class newTestClass {
   private static newTestClass var=null;
   private newTestClass(){
   //Private Constructor can be accessed within the class
   }
   public static newTestClass testObject(){
           // This method ensures that only one object is created at a time
           if(var==null){
           var= new newTestClass();
           }
     return var;
   }
   public void display(){
           System.out.println(“This is an example of a Private constructor using a Singleton class. “);
   }
   public static void main(String args[]){
           newTestClass newObject= newTestClass.testObject();
           newObject.display();
   }
}
2. Base class of all Exceptions?
3. How can you run same scenario multiple times? InvocationCount
4. How can you ensure finally block is not executed? --> system.exit()
5. collection interface vs class in Java? Refer: https://www.geeksforgeeks.org/collections-class-in-java
6. Hashset vs Hashmap?
7. Different ways of accessing HashMap: https://www.javainterviewpoint.com/iterate-through-hashmap/
8. What is HashTable?
9. Static methods call rule?
10. What is Factory methods?
11. Dependency is added in .xml file, --->? local repo, global repo then install
12. Abstract class vs Interface
13. Overloading vs Overriding
14. FindElement vs FindElements?

Interview Questions – Ness (Managerial Round)
1. Tools and best practices to test middleware application: https://www.softwaretestingclass.com/application-testing/

Some Managerial Round Interview Questions
1. What is your role in a team?
I am equally comfortable taking the lead or allowing a coworker to delegate tasks to me. In my previous experiences, I have managed projects as a team lead and also worked under the direction of other team leads. My experience working with a diverse group of people with unique skills and abilities has allowed me to understand that I may have to shift and adjust my role according to the project.

2. If you make a mistake, how do you fix it?
When I make a mistake, I immediately communicate it and create a plan to rectify it. In my first role as a software developer, I realized that the code I wrote would lead to some bugs down the line. In this situation, I communicated my mistake and resolved it immediately.

3. What are some of the workplace successes that make you proud?
Managers ask questions of this nature to gauge how you define success. It also provides valuable information about what motivates you. Think of all your workplace successes, such as initiatives that have been beneficial, awards or promotions, and answer the question honestly. Example: “In my previous company, I realized that our content writers were spending large amounts of time on research and they produced articles that often required several rounds of fact-checking. I rectified the situation by drafting content resources that ensured consistency and accuracy in all the content. My actions helped to reduce the average production time by more than 50%." Pillar of the month, Pillar of the Quarter awards recognition.

4. How do you resolve workplace conflicts?
I believe it is essential to resolve all conflicts with coworkers as soon as possible without involving the upper management or other individuals. Conflicts become harder to resolve if they persist for long. However, most conflicts occur because of miscommunication, so I schedule a meeting with the relevant individuals and allow everyone to express their views. This allows us to resolve the conflict effectively.

5. If your team resists your idea, what will you do?
Implementing new ideas can sometimes be challenging, especially when it causes significant changes to the team's work process. To avoid challenges and reduce risks, I provide all the evidence available to support my belief that the idea will be beneficial. If my team continues to resist the idea, I typically ask them for any alternative ideas they can offer. Otherwise, I try to gather more resources to gain their support.

6. What motivates you at work?
I am motivated by the desire to help / guide my team members to success. For example, I remember when I was helping one of my team members complete a new task. I provided them with examples of similar tasks I completed in the past and some helpful tips. They ended up receiving praise for this task and it fulfilled me knowing I helped them accomplish success.

7. Why are you seeking employment in our company?
Hiring managers want to know how your interests connect with the job, what your level of commitment is and how you plan to contribute to their company's success. While answering this question, focus on how your goals align with the company's values and missions and give an example of a current challenge or project that you can contribute to when working in the role. Example: “Ever since I started working as a software developer, I have seen WaveWood as a potentially disruptive force in the industry. Now that your CEO is actively shifting the company's focus to blockchain technology, I believe WaveWood is firmly grounding itself in the future. It would be an honour to be a part of that."
Better role, career growth.

8. What are your long-term career goals?
I have significant experience with software test script development, and experience of around couple of years as test manager. I want to become a leader with several teams working on different projects. Considering the number of projects your organisation runs, I believe I can work towards that aspiration.

Refer:
1. https://www.legit.ng/1227348-top-25-managerial-interview-questions-sample-answers.html
2. https://www.wisdomjobs.com/e-university/managerial-round-interview-questions.html

 
GIT Repository Commands
 
Master branch Contains all golden copy of prod
Release branch For a particular release
Develop branch For the development work
Feature branch For a particular feature
	pwd  present working directory 
	ll  long listing (lists all the files in the current branch)
	ls  lists the files
	git branch -l  lists all the local branches
	git branch -a  lists all the local branches along with remote branches
	git branch develop  Creates develop branch with the contents in master branch
	git switch develop  switches to develop branch
	touch abc.text  Creates a file in develop branch
	git checkout master / git switch master  Switches to master branch
Now merge the added file (abc.text) in develop brach to master branch
	git merge develop  Merges the changes in develop into master with complete history in develop branch
	git rebase develop  Merges the changes in develop into master without complete history in develop branch
Until now all these commands have been executed on local branches (master and develop)
	git pull  Gets all the changes from remote branch (say, feature) to the local branch (feature)
	git pull <remote_url> branch_name  Syntax for pulling from remote branch
	git pull . release  Pulls & commits changes from release branch [. Specifies pull is being done from local branch]
	git fetch  Downloads all the changes from remote to local branch but it does not commit
	git push  Pushes the commits from local to remote branch
	git checkout -b release  Creates release branch with contents from current branch and switches to it
	touch xyz.txt  Adds a file in release branch
	git remote  Shows remote branches
	git remote -v  (master) 
	git clone -b <branch_name> <remote_url>  Clones a remote branch
cherry-pick: Gets changes in a particular commitID (of some other branch) to the current branch so that it can be modified on the current branch and pushed back again in the current branch. Syntax as below.
	git cherry-pick <CommitID from another branch>
	vi cherrypick.txt  Opens cherrypick.txt in editor
Soft reset and Hard reset: Soft reset will undo all commits but preserves changes locally. On the other hand, hard reset discards all history and reverts to the specified commit.
	git reset <commitID>  Does soft reset to the commitID specified
	git reset - -hard <commitID>  Does hard reset to the commitID specified
	git reset - -hard HEAD^  Does hard reset one commit back
	git reset - -hard HEAD^^  Does hard reset two commits back
Stash: Saves the uncommitted changes. Suppose you have some uncommitted changes on a branch, you don’t want to commit now, you want to go to some other branch, do some task and come back and then you want to commit. In that case, go for git stash.
	git stash  Saves the uncommitted changes
	git stash list  lists all the stashed changes
	git stash pop <stashID>  Brings the stashed changes
	git stash drop <stashID>  Deletes the stashed changes
	git stash --keep-index 	[Will stash only the staged and modified files]
	git stash -u 			[Will stash the untracked and modified files]
	git stash --patch 		[Git will not stash everything that is modified but instead will prompt interactively which of the changes you would like to stash and which you would like to keep in your working directory]
  
 
	git tag -a “v1.0” -m “some message”  Used to tag/ add some version number to some commit 
	git tag  lists all the tags
 
	git show  Displays the last commit and its metadata
	git log  Displays all the commits
	git diff develop…master  Displays differences between two branches  
	touch xyz.txt  Adds a file in release branch 
	echo “Hello World” > HelloWorld.txt  Creates and writes into a text file

About Guidewire
•	It is a leading software provider company in the P&C Insurance industry. 
•	It has 3 major products - Policy-Center, Claim-Center, Billing-Center which are the most popular products in the Property and Casualty Insurance Industry. 
•	They are used for core P&C Insurance workflows and administration. 
•	These are highly configurable products and can be customized, integrated with any P&C Insurer environment. 
•	It serves as a technology platform for P&C insurance carriers. 
•	Built on latest technologies, they have introduced GOSU (similar to JAVA) programming language. 
•	Major companies operating in the Guidewire consulting domain are: Guidewire itself, Delloitte, PwC, Capgemini, E&Y, Cognizant, Accenture

Scope is wide as it is currently adopted by leading insurance companies in US and other emerging markets. One should have Insurance Domain, Java /J2ee skills to work on this platform.

As the insurance industry is not as technologically flexible as other industries (like Banking industry), Guidewire will have strong market presence for at least 10–15 years even if better products come in the market. Guidewire is used mostly in North American and European markets.

The Company's Insurance Platform consists of three elements: core transaction processing, data management, and analytics, and digital engagement.

Miscellaneous Questions
1. How will you move forward with broken user stories?
Broadly speaking, there are two approaches for breaking up large user stories. The first approach is called ‘horizontal break-down’ and involves breaking down stories by the kind of work that needs to be done, or the layers or components that are involved. So, work that has to be done for the UI, the database, some component, a front-end and testing are split up into technical items on the Backlog. This doesn’t work well in Scrum for several reasons:
Individual items do not result in working, demonstrable, software: 
Increases bottlenecks, instead of reducing them: 
Horizontal slices can't be prioritized: 
Although a horizontal break-down of user stories will result in smaller items, it severely limits the ability of a team to deliver working software, work around bottlenecks and prioritize work. It therefore increases the risk of failing the sprint. A bad idea.
In Scrum, a vertical break-down is more useful, in which user stories are broken down into smaller user stories (instead of technical tasks). If user stories are broken down vertically, they are broken down in such a way that smaller items still result in working, demonstrable, software. Functionality will not be split across technical layers or tasks, but across functional layers. So, if the user story is 'As customer I can pay for my order, so I can get my products', it can be broken down into smaller user stories like 'As customer I can pay by wire transfer, so I can get my products' or 'As customer I can pay with credit card, so I can get my products'.
2. How will you come to know that these user stories are not enough to proceed with the next level?
Various templates, techniques, and acronyms are used to help product managers write user stories. Three of the most common techniques are the role-feature-reason template, the Three Cs (card, conversation, confirmation), and INVEST (independent, negotiable, valuable, estimable, small, testable). This discussion results in refinement of the story with additional details, which may not be in the same format as a use case but should give the development team the details they need to design, develop, and test the code.
3. Risk analysis in sprint?
4. How you manage the risk?

Credit Card Test Scenarios through POS
Capturing Card Details: Following areas should be tested while capturing card details.
•	Credit card number: Test card numbers using the correct length and range and card numbers that are outside the correct length and range.
•	Expiry date: Test valid expiry dates, invalid expiry dates and invalid date formats.
•	CVV number: Test valid CVV numbers, mismatched CVV numbers and blank CVV numbers.
•	AVS code: Entering AVS details for configured numeric or alphanumeric formats.
•	Card reader to capture card details: Test swiping of cards from both sides and chips.
•	Encryption: Verify that captured card numbers are properly encrypted and decrypted.
Authorization: Once card details are captured, they are sent to processor to be authorized. Following areas need to be tested during authorization.
•	Authorized amount: Test that the correct amount is being authorized.
•	Receipt printing: Test that merchant and customer copies of the receipts and any vouchers print properly.
•	Receipt details: Check that the receipts are printing the proper date, time, card details, authorized amount etc.
•	Response code: Test that the correct response codes are being returned for approved, declined, on hold and other transactions.
Settlement: Once the payment is done following things should be tested:
•	Reprinting receipt: Test that you can reprint the receipt for a closed transaction.
•	Void credit card’s payment: Check that you can void a payment before posting it and that after posting a payment voiding is not allowed.
•	Verifying report: All information regarding each credit card transaction should be reflected in reports. Any adjustments made in closed checks should be reflected in the report.
